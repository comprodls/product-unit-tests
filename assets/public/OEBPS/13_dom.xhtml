<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <title>The Document Object Model</title>
    <link rel="stylesheet" href="style.css"/>
  </head>
  <body>
    <article>

<h1 id="dom"><span class="chap_num">Chapter 13</span>The Document Object Model</h1>
<p>When you open a web page in your browser, the browser
retrieves the page&#8217;s HTML text and parses it, much like the way
our parser from <a href="11_language.xhtml#parsing">Chapter 11</a> parsed
programs. The browser builds up a model of the document&#8217;s
structure and then uses this model to draw the page on the screen.</p>
<p>This representation of the document
is one of the toys that a JavaScript program has
available in its sandbox. You can read from the model and also change it. It acts as a
<em>live</em> data structure: when it is modified, the page on the screen is
updated to reflect the changes.</p>
<div id="ch13_sec01">
<h2>Document structure</h2>
<p>You can imagine an HTML document as a nested set of boxes.
Tags such as <code>&lt;body&gt;</code> and <code>&lt;/body&gt;</code> enclose other tags, which in
turn contain other tags or text. Here&#8217;s the example document from
the <a href="12_browser.xhtml#browser">previous chapter</a>:</p>
<pre><span class="cm-meta">&lt;!doctype html></span>
<span class="cm-tag">&lt;html></span>
  <span class="cm-tag">&lt;head></span>
    <span class="cm-tag">&lt;title></span>My home page<span class="cm-tag">&lt;/title></span>
  <span class="cm-tag">&lt;/head></span>
  <span class="cm-tag">&lt;body></span>
    <span class="cm-tag">&lt;h1></span>My home page<span class="cm-tag">&lt;/h1></span>
    <span class="cm-tag">&lt;p></span>Hello, I am Marijn and this is my home page.<span class="cm-tag">&lt;/p></span>
    <span class="cm-tag">&lt;p></span>I also wrote a book! Read it
      <span class="cm-tag">&lt;a</span> <span class="cm-attribute">href</span>=<span class="cm-string">"http://eloquentjavascript.net"</span><span class="cm-tag">></span>here<span class="cm-tag">&lt;/a></span>.<span class="cm-tag">&lt;/p></span>
  <span class="cm-tag">&lt;/body></span>
<span class="cm-tag">&lt;/html></span></pre>
<p>This page has the following structure:</p>
<div class="image">
  <img src="img/html-boxes.svg" alt="HTML document as nested boxes"/>
</div>
<p>The data structure the browser uses to represent the document follows
this shape. For each box, there is an object, which we can
interact with to find out things such as what HTML tag it represents and
which boxes and text it contains. This representation is called the
<em>Document Object Model</em>, or DOM for short.</p>
<p>The global variable <code>document</code> gives us access to these
objects. Its <code>documentElement</code> property refers to the object
representing the <code>&lt;html&gt;</code> tag. It also provides the properties <code>head</code> and
<code>body</code>, which hold the objects for those elements.</p>
</div>
<div id="ch13_sec02">
<h2>Trees</h2>
<p>Think back to the syntax trees from
<a href="11_language.xhtml#parsing">Chapter 11</a> for a moment. Their
structures are strikingly similar to the structure of a browser&#8217;s
document. Each <em>node</em> may refer to other nodes, <em>children</em>, which
in turn may have their own children. This shape is typical of nested
structures where elements can contain sub-elements that are similar to
themselves.</p>
<p>We call a data structure a <em>tree</em>
when it has a branching structure, has no cycles (a node may not
contain itself, directly or indirectly), and has a single,
well-defined “root”. In the case of the DOM,
<code>document.documentElement</code> serves as the root.</p>
<p>Trees come up a lot
in computer science. In addition to representing recursive structures such as
HTML documents or programs, they are often used to maintain
sorted sets of data because elements can usually be found or
inserted more efficiently in a sorted tree than in a sorted flat
array.</p>
<p>A typical tree has different kinds of
nodes. The syntax tree for <a href="11_language.xhtml#language">the Egg
language</a> had variables, values, and application nodes. Application
nodes always have children, whereas variables and values are <em>leaves</em>, or
nodes without children.</p>
<p>The same goes for the DOM. Nodes for regular
<em>elements</em>, which represent HTML tags, determine the structure
of the document. These can have child nodes. An example of such a
node is <code>document.body</code>. Some of these children can be leaf nodes,
such as pieces of text or comments (comments are written between
<code>&lt;!--</code> and <code>--&gt;</code> in HTML).</p>
<p>Each DOM node object
has a <code>nodeType</code> property, which contains a numeric code that
identifies the type of node. Regular elements have the value 1, which
is also defined as the constant property <code>document.ELEMENT_NODE</code>. Text
nodes, representing a section of text in the document, have the value
3 (<code>document.TEXT_NODE</code>). Comments have the value 8
(<code>document.COMMENT_NODE</code>).</p>
<p>So another way to visualize our document tree is as follows:</p>
<div class="image">
  <img src="img/html-tree.svg" alt="HTML document as a tree"/>
</div>
<p>The leaves are text nodes, and the arrows indicate parent-child
relationships between nodes.</p>
</div>
<div id="ch13_sec03">
<h2 id="standard">The standard</h2>
<p>Using cryptic numeric
codes to represent node types is not a very JavaScript-like thing to
do. Later in this chapter, we&#8217;ll see that other parts of the
DOM interface also feel cumbersome and alien. The reason for this
is that the DOM wasn&#8217;t designed for just JavaScript. Rather, it tries
to define a language-neutral interface that can be used in other
systems as well—not just HTML but also XML, which is a generic
data format with an HTML-like syntax.</p>
<p>This is unfortunate. Standards are
often useful. But in this case, the advantage (cross-language
consistency) isn&#8217;t all that compelling. Having an interface that is
properly integrated with the language you are using will save you more
time than having a familiar interface across languages.</p>
<p>As an example of such poor
integration, consider the <code>childNodes</code> property that element nodes in
the DOM have. This property holds an array-like object, with a
<code>length</code> property and properties labeled by numbers to access the
child nodes. But it is an instance of the <code>NodeList</code> type, not a real
array, so it does not have methods such as <code>slice</code> and <code>forEach</code>.</p>
<p>Then
there are issues that are simply poor design. For example, there is no
way to create a new node and immediately add children or attributes to
it. Instead, you have to first create it, then add the children one by
one, and finally set the attributes one by one, using side effects. Code that
interacts heavily with the DOM tends to get long, repetitive, and
ugly.</p>
<p>But these flaws aren&#8217;t fatal. Since JavaScript
allows us to create our own abstractions, it is easy to write some
helper functions that allow you to express the operations you are
performing in a clearer and shorter way. In fact, many libraries
intended for browser programming come with such tools.</p>
</div>
<div id="ch13_sec04">
<h2>Moving through the tree</h2>
<p>DOM nodes contain a wealth of links to other nearby
nodes. The following diagram illustrates these:</p>
<div class="image">
  <img src="img/html-links.svg" alt="Links between DOM nodes"/>
</div>
<p>Although the diagram shows only one link of each type,
every node has a <code>parentNode</code> property that points to its containing
node. Likewise, every element node (node type 1) has a <code>childNodes</code>
property that points to an array-like object holding its children.</p>
<p>In theory, you could move
anywhere in the tree using just these parent and child links. But
JavaScript also gives you access to a number of additional convenience
links. The <code>firstChild</code> and <code>lastChild</code> properties point to the first
and last child elements or have the value <code>null</code> for nodes without
children. Similarly, <code>previousSibling</code> and <code>nextSibling</code> point to
adjacent nodes, which are nodes with the same parent that appear immediately
before or after the node itself. For a first child, <code>previousSibling</code>
will be null, and for a last child, <code>nextSibling</code> will be null.</p>
<p>When
dealing with a nested data structure like this one, recursive functions
are often useful. The following recursive function scans a document for text nodes
containing a given string and returns <code>true</code> when it has found one:</p>
<pre id="talksAbout"><span class="cm-keyword">function</span> <span class="cm-variable">talksAbout</span>(<span class="cm-def">node</span>, <span class="cm-def">string</span>) {
  <span class="cm-keyword">if</span> (<span class="cm-variable-2">node</span>.<span class="cm-property">nodeType</span> <span class="cm-operator">==</span> <span class="cm-variable">document</span>.<span class="cm-property">ELEMENT_NODE</span>) {
    <span class="cm-keyword">for</span> (<span class="cm-keyword">var</span> <span class="cm-def">i</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>; <span class="cm-variable-2">i</span> <span class="cm-operator">&lt;</span> <span class="cm-variable-2">node</span>.<span class="cm-property">childNodes</span>.<span class="cm-property">length</span>; <span class="cm-variable-2">i</span><span class="cm-operator">++</span>) {
      <span class="cm-keyword">if</span> (<span class="cm-variable">talksAbout</span>(<span class="cm-variable-2">node</span>.<span class="cm-property">childNodes</span>[<span class="cm-variable-2">i</span>], <span class="cm-variable-2">string</span>))
        <span class="cm-keyword">return</span> <span class="cm-atom">true</span>;
    }
    <span class="cm-keyword">return</span> <span class="cm-atom">false</span>;
  } <span class="cm-keyword">else</span> <span class="cm-keyword">if</span> (<span class="cm-variable-2">node</span>.<span class="cm-property">nodeType</span> <span class="cm-operator">==</span> <span class="cm-variable">document</span>.<span class="cm-property">TEXT_NODE</span>) {
    <span class="cm-keyword">return</span> <span class="cm-variable-2">node</span>.<span class="cm-property">nodeValue</span>.<span class="cm-property">indexOf</span>(<span class="cm-variable-2">string</span>) <span class="cm-operator">></span> <span class="cm-operator">-</span><span class="cm-number">1</span>;
  }
}

<span class="cm-variable">console</span>.<span class="cm-property">log</span>(<span class="cm-variable">talksAbout</span>(<span class="cm-variable">document</span>.<span class="cm-property">body</span>, <span class="cm-string">"book"</span>));
<span class="cm-comment">// → true</span></pre>
<p>The <code>nodeValue</code> property of a text node refers
to the string of text that it represents.</p>
</div>
<div id="ch13_sec05">
<h2>Finding elements</h2>
<p>Navigating these
links among parents, children, and siblings is often useful, as in
the previous function, which runs through the whole document. But if we
want to find a specific node in the document, reaching it by starting
at <code>document.body</code> and blindly following a hard-coded path of links is
a bad idea. Doing so bakes assumptions into our program about the
precise structure of the document—a structure we might want to change
later. Another complicating factor is that text nodes are created even
for the whitespace between nodes. The example document&#8217;s body tag
does not have just three children (<code>&lt;h1&gt;</code> and two <code>&lt;p&gt;</code> elements) but
actually has seven: those three, plus the spaces before, after, and
between them.</p>
<p>So
if we want to get the <code>href</code> attribute of the link in that document,
we don&#8217;t want to say something like “Get the second child of the sixth
child of the document body”. It&#8217;d be better if we could say “Get the
first link in the document”. And we can.</p>
<pre><span class="cm-keyword">var</span> <span class="cm-variable">link</span> <span class="cm-operator">=</span> <span class="cm-variable">document</span>.<span class="cm-property">body</span>.<span class="cm-property">getElementsByTagName</span>(<span class="cm-string">"a"</span>)[<span class="cm-number">0</span>];
<span class="cm-variable">console</span>.<span class="cm-property">log</span>(<span class="cm-variable">link</span>.<span class="cm-property">href</span>);</pre>
<p>All element nodes have a <code>getElementsByTagName</code>
method, which collects all elements with the given tag name that are
descendants (direct or indirect children) of the given node and
returns them as an array-like object.</p>
<p>To find a specific
<em>single</em> node, you can give it an <code>id</code> attribute and use
<code>document.getElementById</code> instead.</p>
<pre><span class="cm-tag">&lt;p></span>My ostrich Gertrude:<span class="cm-tag">&lt;/p></span>
<span class="cm-tag">&lt;p>&lt;img</span> <span class="cm-attribute">id</span>=<span class="cm-string">"gertrude"</span> <span class="cm-attribute">src</span>=<span class="cm-string">"img/ostrich.png"</span><span class="cm-tag">>&lt;/p></span>

<span class="cm-tag">&lt;script></span>
  <span class="cm-keyword">var</span> <span class="cm-variable">ostrich</span> <span class="cm-operator">=</span> <span class="cm-variable">document</span>.<span class="cm-property">getElementById</span>(<span class="cm-string">"gertrude"</span>);
  <span class="cm-variable">console</span>.<span class="cm-property">log</span>(<span class="cm-variable">ostrich</span>.<span class="cm-property">src</span>);
<span class="cm-tag">&lt;/script></span></pre>
<p>A third,
similar method is <code>getElementsByClassName</code>, which, like
<code>getElementsByTagName</code>, searches through the contents of an element
node and retrieves all elements that have the given string in their
<code>class</code> attribute.</p>
</div>
<div id="ch13_sec06">
<h2>Changing the document</h2>
<p>Almost
everything about the DOM data structure can be changed. Element
nodes have a number of methods that can be used to change their
content. The <code>removeChild</code> method removes the given child node from
the document. To add a child, we can use <code>appendChild</code>, which puts it
at the end of the list of children, or <code>insertBefore</code>, which inserts
the node given as the first argument before the node given as the second
argument.</p>
<pre><span class="cm-tag">&lt;p></span>One<span class="cm-tag">&lt;/p></span>
<span class="cm-tag">&lt;p></span>Two<span class="cm-tag">&lt;/p></span>
<span class="cm-tag">&lt;p></span>Three<span class="cm-tag">&lt;/p></span>

<span class="cm-tag">&lt;script></span>
  <span class="cm-keyword">var</span> <span class="cm-variable">paragraphs</span> <span class="cm-operator">=</span> <span class="cm-variable">document</span>.<span class="cm-property">body</span>.<span class="cm-property">getElementsByTagName</span>(<span class="cm-string">"p"</span>);
  <span class="cm-variable">document</span>.<span class="cm-property">body</span>.<span class="cm-property">insertBefore</span>(<span class="cm-variable">paragraphs</span>[<span class="cm-number">2</span>], <span class="cm-variable">paragraphs</span>[<span class="cm-number">0</span>]);
<span class="cm-tag">&lt;/script></span></pre>
<p>A node can exist in the document in only one place. Thus, inserting
paragraph “Three” in front of paragraph “One” will first remove it
from the end of the document and then insert it at the front,
resulting in “Three/One/Two”. All operations that insert a node
somewhere will, as a side effect, cause it to be removed from its
current position (if it has one).</p>
<p>The <code>replaceChild</code>
method is used to replace a child node with another one. It takes as
arguments two nodes: a new node and the node to be replaced. The
replaced node must be a child of the element the method is called on.
Note that both <code>replaceChild</code> and <code>insertBefore</code> expect the <em>new</em> node
as their first argument.</p>
</div>
<div id="ch13_sec07">
<h2>Creating nodes</h2>
<p>In the following example, we
want to write a script that replaces all images (<code>&lt;img&gt;</code> tags) in
the document with the text held in their <code>alt</code> attributes, which
specifies an alternative textual representation of the image.</p>
<p>This involves not only removing the images
but adding a new text node to replace them. For this, we use the
<code>document.createTextNode</code> method.</p>
<pre><span class="cm-tag">&lt;p></span>The <span class="cm-tag">&lt;img</span> <span class="cm-attribute">src</span>=<span class="cm-string">"img/cat.png"</span> <span class="cm-attribute">alt</span>=<span class="cm-string">"Cat"</span><span class="cm-tag">></span> in the
  <span class="cm-tag">&lt;img</span> <span class="cm-attribute">src</span>=<span class="cm-string">"img/hat.png"</span> <span class="cm-attribute">alt</span>=<span class="cm-string">"Hat"</span><span class="cm-tag">></span>.<span class="cm-tag">&lt;/p></span>

<span class="cm-tag">&lt;p>&lt;button</span> <span class="cm-attribute">onclick</span>=<span class="cm-string">"replaceImages()"</span><span class="cm-tag">></span>Replace<span class="cm-tag">&lt;/button>&lt;/p></span>

<span class="cm-tag">&lt;script></span>
  <span class="cm-keyword">function</span> <span class="cm-variable">replaceImages</span>() {
    <span class="cm-keyword">var</span> <span class="cm-def">images</span> <span class="cm-operator">=</span> <span class="cm-variable">document</span>.<span class="cm-property">body</span>.<span class="cm-property">getElementsByTagName</span>(<span class="cm-string">"img"</span>);
    <span class="cm-keyword">for</span> (<span class="cm-keyword">var</span> <span class="cm-def">i</span> <span class="cm-operator">=</span> <span class="cm-variable-2">images</span>.<span class="cm-property">length</span> <span class="cm-operator">-</span> <span class="cm-number">1</span>; <span class="cm-variable-2">i</span> <span class="cm-operator">>=</span> <span class="cm-number">0</span>; <span class="cm-variable-2">i</span><span class="cm-operator">--</span>) {
      <span class="cm-keyword">var</span> <span class="cm-def">image</span> <span class="cm-operator">=</span> <span class="cm-variable-2">images</span>[<span class="cm-variable-2">i</span>];
      <span class="cm-keyword">if</span> (<span class="cm-variable-2">image</span>.<span class="cm-property">alt</span>) {
        <span class="cm-keyword">var</span> <span class="cm-def">text</span> <span class="cm-operator">=</span> <span class="cm-variable">document</span>.<span class="cm-property">createTextNode</span>(<span class="cm-variable-2">image</span>.<span class="cm-property">alt</span>);
        <span class="cm-variable-2">image</span>.<span class="cm-property">parentNode</span>.<span class="cm-property">replaceChild</span>(<span class="cm-variable-2">text</span>, <span class="cm-variable-2">image</span>);
      }
    }
  }
<span class="cm-tag">&lt;/script></span></pre>
<p>Given a string, <code>createTextNode</code> gives us a type 3 DOM
node (a text node), which we can insert into the document to make it
show up on the screen.</p>
<p>The loop that goes over the images
starts at the end of the list of nodes. This is necessary because the
node list returned by a method like <code>getElementsByTagName</code> (or a
property like <code>childNodes</code>) is <em>live</em>. That is, it is updated as the
document changes. If we started from the front, removing the first
image would cause the list to lose its first element so that the
second time the loop repeats, where <code>i</code> is 1, it would stop because
the length of the collection is now also 1.</p>
<p>If you want a <em>solid</em> collection of nodes, as
opposed to a live one, you can convert the collection to a real array
by calling the array <code>slice</code> method on it.</p>
<pre><span class="cm-keyword">var</span> <span class="cm-variable">arrayish</span> <span class="cm-operator">=</span> {<span class="cm-number cm-property">0</span>: <span class="cm-string">"one"</span>, <span class="cm-number cm-property">1</span>: <span class="cm-string">"two"</span>, <span class="cm-property">length</span>: <span class="cm-number">2</span>};
<span class="cm-keyword">var</span> <span class="cm-variable">real</span> <span class="cm-operator">=</span> <span class="cm-variable">Array</span>.<span class="cm-property">prototype</span>.<span class="cm-property">slice</span>.<span class="cm-property">call</span>(<span class="cm-variable">arrayish</span>, <span class="cm-number">0</span>);
<span class="cm-variable">real</span>.<span class="cm-property">forEach</span>(<span class="cm-keyword">function</span>(<span class="cm-def">elt</span>) { <span class="cm-variable">console</span>.<span class="cm-property">log</span>(<span class="cm-variable-2">elt</span>); });
<span class="cm-comment">// → one</span>
<span class="cm-comment">//   two</span></pre>
<p>To create regular element nodes (type
1), you can use the <code>document.createElement</code> method. This method takes
a tag name and returns a new empty node of the given type.</p>
<p id="elt">The
following example defines a utility <code>elt</code>, which creates an element
node and treats the rest of its arguments as children to that node.
This function is then used to add a simple attribution to a quote.</p>
<pre><span class="cm-tag">&lt;blockquote</span> <span class="cm-attribute">id</span>=<span class="cm-string">"quote"</span><span class="cm-tag">></span>
  No book can ever be finished. While working on it we learn
  just enough to find it immature the moment we turn away
  from it.
<span class="cm-tag">&lt;/blockquote></span>

<span class="cm-tag">&lt;script></span>
  <span class="cm-keyword">function</span> <span class="cm-variable">elt</span>(<span class="cm-def">type</span>) {
    <span class="cm-keyword">var</span> <span class="cm-def">node</span> <span class="cm-operator">=</span> <span class="cm-variable">document</span>.<span class="cm-property">createElement</span>(<span class="cm-variable-2">type</span>);
    <span class="cm-keyword">for</span> (<span class="cm-keyword">var</span> <span class="cm-def">i</span> <span class="cm-operator">=</span> <span class="cm-number">1</span>; <span class="cm-variable-2">i</span> <span class="cm-operator">&lt;</span> <span class="cm-variable-2">arguments</span>.<span class="cm-property">length</span>; <span class="cm-variable-2">i</span><span class="cm-operator">++</span>) {
      <span class="cm-keyword">var</span> <span class="cm-def">child</span> <span class="cm-operator">=</span> <span class="cm-variable-2">arguments</span>[<span class="cm-variable-2">i</span>];
      <span class="cm-keyword">if</span> (<span class="cm-keyword">typeof</span> <span class="cm-variable-2">child</span> <span class="cm-operator">==</span> <span class="cm-string">"string"</span>)
        <span class="cm-variable-2">child</span> <span class="cm-operator">=</span> <span class="cm-variable">document</span>.<span class="cm-property">createTextNode</span>(<span class="cm-variable-2">child</span>);
      <span class="cm-variable-2">node</span>.<span class="cm-property">appendChild</span>(<span class="cm-variable-2">child</span>);
    }
    <span class="cm-keyword">return</span> <span class="cm-variable-2">node</span>;
  }

  <span class="cm-variable">document</span>.<span class="cm-property">getElementById</span>(<span class="cm-string">"quote"</span>).<span class="cm-property">appendChild</span>(
    <span class="cm-variable">elt</span>(<span class="cm-string">"footer"</span>, <span class="cm-string">"—"</span>,
        <span class="cm-variable">elt</span>(<span class="cm-string">"strong"</span>, <span class="cm-string">"Karl Popper"</span>),
        <span class="cm-string">", preface to the second editon of "</span>,
        <span class="cm-variable">elt</span>(<span class="cm-string">"em"</span>, <span class="cm-string">"The Open Society and Its Enemies"</span>),
        <span class="cm-string">", 1950"</span>));
<span class="cm-tag">&lt;/script></span></pre>
<p>This is what the resulting document looks like:</p>
<div class="image">
  <img src="img/blockquote.png" alt="A blockquote with attribution"/>
</div>
</div>
<div id="ch13_sec08">
<h2>Attributes</h2>
<p>Some element attributes, such as <code>href</code> for
links, can be accessed through a property of the same name on the
element&#8217;s DOM object. This is the case for a limited set of
commonly used standard attributes.</p>
<p>But HTML allows you to set any attribute you want on nodes.
This can be useful because it allows you to store extra information in a
document. If you make up your own attribute names, though, such
attributes will not be present as a property on the element&#8217;s node.
Instead, you&#8217;ll have to use the <code>getAttribute</code> and <code>setAttribute</code>
methods to work with them.</p>
<pre><span class="cm-tag">&lt;p</span> <span class="cm-attribute">data-classified</span>=<span class="cm-string">"secret"</span><span class="cm-tag">></span>The launch code is 00000000.<span class="cm-tag">&lt;/p></span>
<span class="cm-tag">&lt;p</span> <span class="cm-attribute">data-classified</span>=<span class="cm-string">"unclassified"</span><span class="cm-tag">></span>I have two feet.<span class="cm-tag">&lt;/p></span>

<span class="cm-tag">&lt;script></span>
  <span class="cm-keyword">var</span> <span class="cm-variable">paras</span> <span class="cm-operator">=</span> <span class="cm-variable">document</span>.<span class="cm-property">body</span>.<span class="cm-property">getElementsByTagName</span>(<span class="cm-string">"p"</span>);
  <span class="cm-variable">Array</span>.<span class="cm-property">prototype</span>.<span class="cm-property">forEach</span>.<span class="cm-property">call</span>(<span class="cm-variable">paras</span>, <span class="cm-keyword">function</span>(<span class="cm-def">para</span>) {
    <span class="cm-keyword">if</span> (<span class="cm-variable-2">para</span>.<span class="cm-property">getAttribute</span>(<span class="cm-string">"data-classified"</span>) <span class="cm-operator">==</span> <span class="cm-string">"secret"</span>)
      <span class="cm-variable-2">para</span>.<span class="cm-property">parentNode</span>.<span class="cm-property">removeChild</span>(<span class="cm-variable-2">para</span>);
  });
<span class="cm-tag">&lt;/script></span></pre>
<p>I recommended prefixing the names of such made-up attributes with
<code>data-</code> to ensure they do not conflict with any other
attributes.</p>
<p>As a simple
example, we&#8217;ll write a “syntax highlighter” that looks for <code>&lt;pre&gt;</code>
tags (“preformatted”, used for code and similar plaintext) with a
<code>data-language</code> attribute and crudely tries to highlight the
keywords for that language.</p>
<pre><span class="cm-keyword">function</span> <span class="cm-variable">highlightCode</span>(<span class="cm-def">node</span>, <span class="cm-def">keywords</span>) {
  <span class="cm-keyword">var</span> <span class="cm-def">text</span> <span class="cm-operator">=</span> <span class="cm-variable-2">node</span>.<span class="cm-property">textContent</span>;
  <span class="cm-variable-2">node</span>.<span class="cm-property">textContent</span> <span class="cm-operator">=</span> <span class="cm-string">""</span>; <span class="cm-comment">// Clear the node</span>

  <span class="cm-keyword">var</span> <span class="cm-def">match</span>, <span class="cm-def">pos</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>;
  <span class="cm-keyword">while</span> (<span class="cm-variable-2">match</span> <span class="cm-operator">=</span> <span class="cm-variable-2">keywords</span>.<span class="cm-property">exec</span>(<span class="cm-variable-2">text</span>)) {
    <span class="cm-keyword">var</span> <span class="cm-def">before</span> <span class="cm-operator">=</span> <span class="cm-variable-2">text</span>.<span class="cm-property">slice</span>(<span class="cm-variable-2">pos</span>, <span class="cm-variable-2">match</span>.<span class="cm-property">index</span>);
    <span class="cm-variable-2">node</span>.<span class="cm-property">appendChild</span>(<span class="cm-variable">document</span>.<span class="cm-property">createTextNode</span>(<span class="cm-variable-2">before</span>));
    <span class="cm-keyword">var</span> <span class="cm-def">strong</span> <span class="cm-operator">=</span> <span class="cm-variable">document</span>.<span class="cm-property">createElement</span>(<span class="cm-string">"strong"</span>);
    <span class="cm-variable-2">strong</span>.<span class="cm-property">appendChild</span>(<span class="cm-variable">document</span>.<span class="cm-property">createTextNode</span>(<span class="cm-variable-2">match</span>[<span class="cm-number">0</span>]));
    <span class="cm-variable-2">node</span>.<span class="cm-property">appendChild</span>(<span class="cm-variable-2">strong</span>);
    <span class="cm-variable-2">pos</span> <span class="cm-operator">=</span> <span class="cm-variable-2">keywords</span>.<span class="cm-property">lastIndex</span>;
  }
  <span class="cm-keyword">var</span> <span class="cm-def">after</span> <span class="cm-operator">=</span> <span class="cm-variable-2">text</span>.<span class="cm-property">slice</span>(<span class="cm-variable-2">pos</span>);
  <span class="cm-variable-2">node</span>.<span class="cm-property">appendChild</span>(<span class="cm-variable">document</span>.<span class="cm-property">createTextNode</span>(<span class="cm-variable-2">after</span>));
}</pre>
<p>The function <code>highlightCode</code> takes a <code>&lt;pre&gt;</code> node and a
regular expression (with the “global” option turned on) that
matches the keywords of the programming language that the element
contains.</p>
<p>The
<code>textContent</code> property is used to get all the text in the node
and is then set to an empty string, which has the effect of emptying
the node. We loop over all matches of the keyword expression,
appending the text <em>between</em> them as regular text nodes, and the text
matched (the keywords) as text nodes wrapped in <code>&lt;strong&gt;</code> (bold) elements.</p>
<p>We can
automatically highlight all programs on the page by looping over all
the <code>&lt;pre&gt;</code> elements that have a <code>data-language</code> attribute and
calling <code>highlightCode</code> on each one with the correct regular
expression for the language.</p>
<pre><span class="cm-keyword">var</span> <span class="cm-variable">languages</span> <span class="cm-operator">=</span> {
  <span class="cm-property">javascript</span>: <span class="cm-string-2">/\b(function|return|var)\b/g</span> <span class="cm-comment">/* … etc */</span>
};

<span class="cm-keyword">function</span> <span class="cm-variable">highlightAllCode</span>() {
  <span class="cm-keyword">var</span> <span class="cm-def">pres</span> <span class="cm-operator">=</span> <span class="cm-variable">document</span>.<span class="cm-property">body</span>.<span class="cm-property">getElementsByTagName</span>(<span class="cm-string">"pre"</span>);
  <span class="cm-keyword">for</span> (<span class="cm-keyword">var</span> <span class="cm-def">i</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>; <span class="cm-variable-2">i</span> <span class="cm-operator">&lt;</span> <span class="cm-variable-2">pres</span>.<span class="cm-property">length</span>; <span class="cm-variable-2">i</span><span class="cm-operator">++</span>) {
    <span class="cm-keyword">var</span> <span class="cm-def">pre</span> <span class="cm-operator">=</span> <span class="cm-variable-2">pres</span>[<span class="cm-variable-2">i</span>];
    <span class="cm-keyword">var</span> <span class="cm-def">lang</span> <span class="cm-operator">=</span> <span class="cm-variable-2">pre</span>.<span class="cm-property">getAttribute</span>(<span class="cm-string">"data-language"</span>);
    <span class="cm-keyword">if</span> (<span class="cm-variable">languages</span>.<span class="cm-property">hasOwnProperty</span>(<span class="cm-variable-2">lang</span>))
      <span class="cm-variable">highlightCode</span>(<span class="cm-variable-2">pre</span>, <span class="cm-variable">languages</span>[<span class="cm-variable-2">lang</span>]);
  }
}</pre>
<p>Here is an example:</p>
<pre><span class="cm-tag">&lt;p></span>Here it is, the identity function:<span class="cm-tag">&lt;/p></span>
<span class="cm-tag">&lt;pre</span> <span class="cm-attribute">data-language</span>=<span class="cm-string">"javascript"</span><span class="cm-tag">></span>
function id(x) { return x; }
<span class="cm-tag">&lt;/pre></span>

<span class="cm-tag">&lt;script></span><span class="cm-variable">highlightAllCode</span>();<span class="cm-tag">&lt;/script></span></pre>
<p>This produces a page that looks like this:</p>
<div class="image">
  <img src="img/highlighted.png" alt="A highlighted piece of code"/>
</div>
<p>There is one commonly used attribute,
<code>class</code>, which is a reserved word in the JavaScript language. For
historical reasons—some old JavaScript implementations could not
handle property names that matched keywords or reserved words—the
property used to access this attribute is called <code>className</code>. You can
also access it under its real name, <code>"class"</code>, by using the
<code>getAttribute</code> and <code>setAttribute</code> methods.</p>
</div>
<div id="ch13_sec09">
<h2>Layout</h2>
<p>You
might have noticed that different types of elements are laid out
differently. Some, such as paragraphs (<code>&lt;p&gt;</code>) or headings (<code>&lt;h1&gt;</code>),
take up the whole width of the document and are rendered on separate
lines. These are called <em>block</em> elements. Others, such as links
(<code>&lt;a&gt;</code>) or the <code>&lt;strong&gt;</code> element used in the previous example, are
rendered on the same line with their surrounding text. Such elements
are called <em>inline</em> elements.</p>
<p>For any given document, browsers are able to compute a
layout, which gives each element a size and position based on its
type and content. This layout is then used to actually draw the
document.</p>
<p>The size and position of an element can be
accessed from JavaScript. The <code>offsetWidth</code> and <code>offsetHeight</code>
properties give you the space the element takes up in <em>pixels</em>. A
pixel is the basic unit of measurement in the browser and typically
corresponds to the smallest dot that your screen can display.
Similarly, <code>clientWidth</code> and <code>clientHeight</code> give you the size of the
space <em>inside</em> the element, ignoring border width.</p>
<pre><span class="cm-tag">&lt;p</span> <span class="cm-attribute">style</span>=<span class="cm-string">"border: 3px solid red"</span><span class="cm-tag">></span>
  I'm boxed in
<span class="cm-tag">&lt;/p></span>

<span class="cm-tag">&lt;script></span>
  <span class="cm-keyword">var</span> <span class="cm-variable">para</span> <span class="cm-operator">=</span> <span class="cm-variable">document</span>.<span class="cm-property">body</span>.<span class="cm-property">getElementsByTagName</span>(<span class="cm-string">"p"</span>)[<span class="cm-number">0</span>];
  <span class="cm-variable">console</span>.<span class="cm-property">log</span>(<span class="cm-string">"clientHeight:"</span>, <span class="cm-variable">para</span>.<span class="cm-property">clientHeight</span>);
  <span class="cm-variable">console</span>.<span class="cm-property">log</span>(<span class="cm-string">"offsetHeight:"</span>, <span class="cm-variable">para</span>.<span class="cm-property">offsetHeight</span>);
<span class="cm-tag">&lt;/script></span></pre>
<p>Giving a paragraph a border causes a rectangle to be drawn around it.</p>
<div class="image">
  <img src="img/boxed-in.png" alt="A paragraph with a border"/>
</div>
<p id="boundingRect">The most effective way to find
the precise position of an element on the screen is the
<code>getBoundingClientRect</code> method. It returns an object with <code>top</code>,
<code>bottom</code>, <code>left</code>, and <code>right</code> properties, indicating the pixel
positions of the sides of the element relative to the top left of the
screen. If you want them relative to the whole document, you must
add the current scroll position, found under the global <code>pageXOffset</code>
and <code>pageYOffset</code> variables.</p>
<p>Laying
out a document can be quite a lot of work. In the interest of speed,
browser engines do not immediately re-layout a document every time it
is changed but rather wait as long as they can. When a JavaScript
program that changed the document finishes running, the browser will
have to compute a new layout in order to display the changed document
on the screen. When a program <em>asks</em> for the position or size of
something by reading properties such as <code>offsetHeight</code> or calling
<code>getBoundingClientRect</code>, providing correct information also requires
computing a layout.</p>
<p>A program that
repeatedly alternates between reading DOM layout information and
changing the DOM forces a lot of layouts to happen and will
consequently run really slowly. The following code shows an example of
this. It contains two different programs that build up a line of <em>X</em>
characters 2,000 pixels wide and measures the time each one takes.</p>
<pre><span class="cm-tag">&lt;p>&lt;span</span> <span class="cm-attribute">id</span>=<span class="cm-string">"one"</span><span class="cm-tag">>&lt;/span>&lt;/p></span>
<span class="cm-tag">&lt;p>&lt;span</span> <span class="cm-attribute">id</span>=<span class="cm-string">"two"</span><span class="cm-tag">>&lt;/span>&lt;/p></span>

<span class="cm-tag">&lt;script></span>
  <span class="cm-keyword">function</span> <span class="cm-variable">time</span>(<span class="cm-def">name</span>, <span class="cm-def">action</span>) {
    <span class="cm-keyword">var</span> <span class="cm-def">start</span> <span class="cm-operator">=</span> <span class="cm-variable">Date</span>.<span class="cm-property">now</span>(); <span class="cm-comment">// Current time in milliseconds</span>
    <span class="cm-variable-2">action</span>();
    <span class="cm-variable">console</span>.<span class="cm-property">log</span>(<span class="cm-variable-2">name</span>, <span class="cm-string">"took"</span>, <span class="cm-variable">Date</span>.<span class="cm-property">now</span>() <span class="cm-operator">-</span> <span class="cm-variable-2">start</span>, <span class="cm-string">"ms"</span>);
  }

  <span class="cm-variable">time</span>(<span class="cm-string">"naive"</span>, <span class="cm-keyword">function</span>() {
    <span class="cm-keyword">var</span> <span class="cm-def">target</span> <span class="cm-operator">=</span> <span class="cm-variable">document</span>.<span class="cm-property">getElementById</span>(<span class="cm-string">"one"</span>);
    <span class="cm-keyword">while</span> (<span class="cm-variable-2">target</span>.<span class="cm-property">offsetWidth</span> <span class="cm-operator">&lt;</span> <span class="cm-number">2000</span>)
      <span class="cm-variable-2">target</span>.<span class="cm-property">appendChild</span>(<span class="cm-variable">document</span>.<span class="cm-property">createTextNode</span>(<span class="cm-string">"X"</span>));
  });
  <span class="cm-comment">// → naive took 32 ms</span>

  <span class="cm-variable">time</span>(<span class="cm-string">"clever"</span>, <span class="cm-keyword">function</span>() {
    <span class="cm-keyword">var</span> <span class="cm-def">target</span> <span class="cm-operator">=</span> <span class="cm-variable">document</span>.<span class="cm-property">getElementById</span>(<span class="cm-string">"two"</span>);
    <span class="cm-variable-2">target</span>.<span class="cm-property">appendChild</span>(<span class="cm-variable">document</span>.<span class="cm-property">createTextNode</span>(<span class="cm-string">"XXXXX"</span>));
    <span class="cm-keyword">var</span> <span class="cm-def">total</span> <span class="cm-operator">=</span> <span class="cm-variable">Math</span>.<span class="cm-property">ceil</span>(<span class="cm-number">2000</span> <span class="cm-operator">/</span> (<span class="cm-variable-2">target</span>.<span class="cm-property">offsetWidth</span> <span class="cm-operator">/</span> <span class="cm-number">5</span>));
    <span class="cm-keyword">for</span> (<span class="cm-keyword">var</span> <span class="cm-def">i</span> <span class="cm-operator">=</span> <span class="cm-number">5</span>; <span class="cm-variable-2">i</span> <span class="cm-operator">&lt;</span> <span class="cm-variable-2">total</span>; <span class="cm-variable-2">i</span><span class="cm-operator">++</span>)
      <span class="cm-variable-2">target</span>.<span class="cm-property">appendChild</span>(<span class="cm-variable">document</span>.<span class="cm-property">createTextNode</span>(<span class="cm-string">"X"</span>));
  });
  <span class="cm-comment">// → clever took 1 ms</span>
<span class="cm-tag">&lt;/script></span></pre>
</div>
<div id="ch13_sec10">
<h2>Styling</h2>
<p>We have seen that different
HTML elements display different behavior. Some are displayed as
blocks, others inline. Some add styling, such as <code>&lt;strong&gt;</code> making its
content bold and <code>&lt;a&gt;</code> making it blue and underlining it.</p>
<p>The way
an <code>&lt;img&gt;</code> tag shows an image or an <code>&lt;a&gt;</code> tag causes a link to be
followed when it is clicked is strongly tied to the element type. But
the default styling associated with an element, such as the text color
or underline, can be changed by us. Here is an example using the <code>style</code>
property:</p>
<pre><span class="cm-tag">&lt;p>&lt;a</span> <span class="cm-attribute">href</span>=<span class="cm-string">"."</span><span class="cm-tag">></span>Normal link<span class="cm-tag">&lt;/a>&lt;/p></span>
<span class="cm-tag">&lt;p>&lt;a</span> <span class="cm-attribute">href</span>=<span class="cm-string">"."</span> <span class="cm-attribute">style</span>=<span class="cm-string">"color: green"</span><span class="cm-tag">></span>Green link<span class="cm-tag">&lt;/a>&lt;/p></span></pre>
<p>The second link will be green instead of the default link color.</p>
<div class="image">
  <img src="img/colored-links.png" alt="A normal and a green link"/>
</div>
<p>A
style attribute may contain one or more <em>declarations</em>, which are
a property (such as <code>color</code>) followed by a colon and a value (such as
<code>green</code>). When there is more than one declaration, they must be
separated by semicolons, as in <code>"color: red; border: none"</code>.</p>
<p>There are a lot of aspects that can be
influenced by styling. For example, the <code>display</code> property controls
whether an element is displayed as a block or an inline element.</p>
<pre>This text is displayed <span class="cm-tag">&lt;strong></span>inline<span class="cm-tag">&lt;/strong></span>,
<span class="cm-tag">&lt;strong</span> <span class="cm-attribute">style</span>=<span class="cm-string">"display: block"</span><span class="cm-tag">></span>as a block<span class="cm-tag">&lt;/strong></span>, and
<span class="cm-tag">&lt;strong</span> <span class="cm-attribute">style</span>=<span class="cm-string">"display: none"</span><span class="cm-tag">></span>not at all<span class="cm-tag">&lt;/strong></span>.</pre>
<p>The <code>block</code> tag will end up on its own line since
block elements are not displayed inline with the text around them.
The last tag is not displayed at all—<code>display: none</code> prevents an
element from showing up on the screen. This is a way to hide elements.
It is often preferable to removing them from the document
entirely because it makes it easy to reveal them again at a later time.</p>
<div class="image">
  <img src="img/display.png" alt="Different display styles"/>
</div>
<p>JavaScript code can directly
manipulate the style of an element through the node&#8217;s <code>style</code>
property. This property holds an object that has properties for all
possible style properties. The values of these properties are strings,
which we can write to in order to change a particular aspect of the
element&#8217;s style.</p>
<pre><span class="cm-tag">&lt;p</span> <span class="cm-attribute">id</span>=<span class="cm-string">"para"</span> <span class="cm-attribute">style</span>=<span class="cm-string">"color: purple"</span><span class="cm-tag">></span>
  Pretty text
<span class="cm-tag">&lt;/p></span>

<span class="cm-tag">&lt;script></span>
  <span class="cm-keyword">var</span> <span class="cm-variable">para</span> <span class="cm-operator">=</span> <span class="cm-variable">document</span>.<span class="cm-property">getElementById</span>(<span class="cm-string">"para"</span>);
  <span class="cm-variable">console</span>.<span class="cm-property">log</span>(<span class="cm-variable">para</span>.<span class="cm-property">style</span>.<span class="cm-property">color</span>);
  <span class="cm-variable">para</span>.<span class="cm-property">style</span>.<span class="cm-property">color</span> <span class="cm-operator">=</span> <span class="cm-string">"magenta"</span>;
<span class="cm-tag">&lt;/script></span></pre>
<p>Some style property names contain dashes, such as <code>font-family</code>.
Because such property names are awkward to work with in JavaScript
(you&#8217;d have to say <code>style["font-family"]</code>), the property names in the
<code>style</code> object for such properties have their dashes removed and the
letters that follow them capitalized (<code>style.fontFamily</code>).</p>
</div>
<div id="ch13_sec11">
<h2>Cascading styles</h2>
<p>The styling system for HTML is called CSS
for <em>Cascading Style Sheets</em>. A <em>style sheet</em> is a set of
rules for how to style elements in a document. It can be given
inside a <code>&lt;style&gt;</code> tag.</p>
<pre><span class="cm-tag">&lt;style></span>
  <span class="cm-tag">strong</span> {
    <span class="cm-property">font-style</span>: <span class="cm-atom">italic</span>;
    <span class="cm-property">color</span>: <span class="cm-keyword">gray</span>;
  }
<span class="cm-tag">&lt;/style></span>
<span class="cm-tag">&lt;p></span>Now <span class="cm-tag">&lt;strong></span>strong text<span class="cm-tag">&lt;/strong></span> is italic and gray.<span class="cm-tag">&lt;/p></span></pre>
<p>The <em>cascading</em> in the name
refers to the fact that multiple such rules are combined to
produce the final style for an element. In the previous example, the
default styling for <code>&lt;strong&gt;</code> tags, which gives them <code>font-weight:
bold</code>, is overlaid by the rule in the <code>&lt;style&gt;</code> tag, which adds
<code>font-style</code> and <code>color</code>.</p>
<p>When multiple rules define
a value for the same property, the most recently read rule gets a
higher precedence and wins. So if the rule in the <code>&lt;style&gt;</code>
tag included <code>font-weight: normal</code>, conflicting with the default
<code>font-weight</code> rule, the text would be normal, <em>not</em> bold. Styles in a
<code>style</code> attribute applied directly to the node have the highest
precedence and always win.</p>
<p>It is possible
to target things other than tag names in CSS rules. A rule for
<code>.abc</code> applies to all elements with <code>"abc"</code> in their class attributes.
A rule for <code>#xyz</code> applies to the element with an <code>id</code> attribute of
<code>"xyz"</code> (which should be unique within the document).</p>
<pre><span class="cm-qualifier">.subtle</span> {
  <span class="cm-property">color</span>: <span class="cm-keyword">gray</span>;
  <span class="cm-property">font-size</span>: <span class="cm-number">80%</span>;
}
<span class="cm-builtin">#header</span> {
  <span class="cm-property">background</span>: <span class="cm-keyword">blue</span>;
  <span class="cm-property">color</span>: <span class="cm-keyword">white</span>;
}
<span class="cm-comment">/* p elements, with classes a and b, and id main */</span>
<span class="cm-tag">p</span><span class="cm-qualifier">.a.b</span><span class="cm-builtin">#main</span> {
  <span class="cm-property">margin-bottom</span>: <span class="cm-number">20px</span>;
}</pre>
<p>The precedence rule favoring the most recently defined rule
holds true only when the rules have the same <em>specificity</em>. A rule&#8217;s
specificity is a measure of how precisely it describes matching
elements, determined by the number and kind (tag, class, or ID) of
element aspects it requires. For example, a rule that targets <code>p.a</code> is more specific than
rules that target <code>p</code> or just <code>.a</code>, and would thus take precedence
over them.</p>
<p>The notation <code>p &gt; a {…}</code> applies the given
styles to all <code>&lt;a&gt;</code> tags that are direct children of <code>&lt;p&gt;</code> tags.
Similarly, <code>p a {…}</code> applies to all <code>&lt;a&gt;</code> tags inside <code>&lt;p&gt;</code> tags,
whether they are direct or indirect children.</p>
</div>
<div id="ch13_sec12">
<h2>Query selectors</h2>
<p>We won&#8217;t be using style sheets all that much in
this book. Although understanding them is crucial to programming in
the browser, properly explaining all the properties they support and the
interaction among those properties would take two or three books.</p>
<p>The main reason I introduced
<em>selector</em> syntax—the notation used in style sheets to determine
which elements a set of styles apply to—is that we can use this same
mini-language as an effective way to find DOM elements.</p>
<p>The <code>querySelectorAll</code> method, which is defined
both on the <code>document</code> object and on element nodes, takes a selector
string and returns an array-like object containing all the
elements that it matches.</p>
<pre><span class="cm-tag">&lt;p></span>And if you go chasing
  <span class="cm-tag">&lt;span</span> <span class="cm-attribute">class</span>=<span class="cm-string">"animal"</span><span class="cm-tag">></span>rabbits<span class="cm-tag">&lt;/span>&lt;/p></span>
<span class="cm-tag">&lt;p></span>And you know you're going to fall<span class="cm-tag">&lt;/p></span>
<span class="cm-tag">&lt;p></span>Tell 'em a <span class="cm-tag">&lt;span</span> <span class="cm-attribute">class</span>=<span class="cm-string">"character"</span><span class="cm-tag">></span>hookah smoking
  <span class="cm-tag">&lt;span</span> <span class="cm-attribute">class</span>=<span class="cm-string">"animal"</span><span class="cm-tag">></span>caterpillar<span class="cm-tag">&lt;/span>&lt;/span>&lt;/p></span>
<span class="cm-tag">&lt;p></span>Has given you the call<span class="cm-tag">&lt;/p></span>

<span class="cm-tag">&lt;script></span>
  <span class="cm-keyword">function</span> <span class="cm-variable">count</span>(<span class="cm-def">selector</span>) {
    <span class="cm-keyword">return</span> <span class="cm-variable">document</span>.<span class="cm-property">querySelectorAll</span>(<span class="cm-variable-2">selector</span>).<span class="cm-property">length</span>;
  }
  <span class="cm-variable">console</span>.<span class="cm-property">log</span>(<span class="cm-variable">count</span>(<span class="cm-string">"p"</span>));           <span class="cm-comment">// All &lt;p> elements</span>
  <span class="cm-comment">// → 4</span>
  <span class="cm-variable">console</span>.<span class="cm-property">log</span>(<span class="cm-variable">count</span>(<span class="cm-string">".animal"</span>));     <span class="cm-comment">// Class animal</span>
  <span class="cm-comment">// → 2</span>
  <span class="cm-variable">console</span>.<span class="cm-property">log</span>(<span class="cm-variable">count</span>(<span class="cm-string">"p .animal"</span>));   <span class="cm-comment">// Animal inside of &lt;p></span>
  <span class="cm-comment">// → 2</span>
  <span class="cm-variable">console</span>.<span class="cm-property">log</span>(<span class="cm-variable">count</span>(<span class="cm-string">"p > .animal"</span>)); <span class="cm-comment">// Direct child of &lt;p></span>
  <span class="cm-comment">// → 1</span>
<span class="cm-tag">&lt;/script></span></pre>
<p>Unlike methods such as <code>getElementsByTagName</code>,
the object returned by <code>querySelectorAll</code> is <em>not</em> live. It won&#8217;t
change when you change the document.</p>
<p>The <code>querySelector</code> method (without the
<code>All</code> part) works in a similar way. This one is useful if you want a
specific, single element. It will return only the first matching
element or null if no elements match.</p>
</div>
<div id="ch13_sec13">
<h2 id="animation">Positioning and animating</h2>
<p>The <code>position</code> style property
influences layout in a powerful way. By default it has a value of
<code>static</code>, meaning the element sits in its normal place in the
document. When it is set to <code>relative</code>, the element still takes up
space in the document, but now the <code>top</code> and <code>left</code> style properties
can be used to move it relative to its normal place. When <code>position</code>
is set to <code>absolute</code>, the element is removed from the normal document
flow—that is, it no longer takes up space and may overlap with other
elements. Also, its <code>top</code> and <code>left</code> properties can be used to
absolutely position it relative to the top-left corner of the nearest
enclosing element whose <code>position</code> property isn&#8217;t <code>static</code>, or
relative to the document if no such enclosing element exists.</p>
<p>We can use this to create an animation. The following document
displays a picture of a cat that floats around in an ellipse:</p>
<pre><span class="cm-tag">&lt;p</span> <span class="cm-attribute">style</span>=<span class="cm-string">"text-align: center"</span><span class="cm-tag">></span>
  <span class="cm-tag">&lt;img</span> <span class="cm-attribute">src</span>=<span class="cm-string">"img/cat.png"</span> <span class="cm-attribute">style</span>=<span class="cm-string">"position: relative"</span><span class="cm-tag">></span>
<span class="cm-tag">&lt;/p></span>
<span class="cm-tag">&lt;script></span>
  <span class="cm-keyword">var</span> <span class="cm-variable">cat</span> <span class="cm-operator">=</span> <span class="cm-variable">document</span>.<span class="cm-property">querySelector</span>(<span class="cm-string">"img"</span>);
  <span class="cm-keyword">var</span> <span class="cm-variable">angle</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>, <span class="cm-variable">lastTime</span> <span class="cm-operator">=</span> <span class="cm-atom">null</span>;
  <span class="cm-keyword">function</span> <span class="cm-variable">animate</span>(<span class="cm-def">time</span>) {
    <span class="cm-keyword">if</span> (<span class="cm-variable">lastTime</span> <span class="cm-operator">!=</span> <span class="cm-atom">null</span>)
      <span class="cm-variable">angle</span> <span class="cm-operator">+=</span> (<span class="cm-variable-2">time</span> <span class="cm-operator">-</span> <span class="cm-variable">lastTime</span>) <span class="cm-operator">*</span> <span class="cm-number">0.001</span>;
    <span class="cm-variable">lastTime</span> <span class="cm-operator">=</span> <span class="cm-variable-2">time</span>;
    <span class="cm-variable">cat</span>.<span class="cm-property">style</span>.<span class="cm-property">top</span> <span class="cm-operator">=</span> (<span class="cm-variable">Math</span>.<span class="cm-property">sin</span>(<span class="cm-variable">angle</span>) <span class="cm-operator">*</span> <span class="cm-number">20</span>) <span class="cm-operator">+</span> <span class="cm-string">"px"</span>;
    <span class="cm-variable">cat</span>.<span class="cm-property">style</span>.<span class="cm-property">left</span> <span class="cm-operator">=</span> (<span class="cm-variable">Math</span>.<span class="cm-property">cos</span>(<span class="cm-variable">angle</span>) <span class="cm-operator">*</span> <span class="cm-number">200</span>) <span class="cm-operator">+</span> <span class="cm-string">"px"</span>;
    <span class="cm-variable">requestAnimationFrame</span>(<span class="cm-variable">animate</span>);
  }
  <span class="cm-variable">requestAnimationFrame</span>(<span class="cm-variable">animate</span>);
<span class="cm-tag">&lt;/script></span></pre>
<p>The gray arrow shows the path along which the image moves.</p>
<div class="image">
  <img src="img/cat-animation.png" alt="A moving cat head"/>
</div>
<p>The picture is centered on the page and given a
<code>position</code> of <code>relative</code>. We&#8217;ll repeatedly update that picture&#8217;s <code>top</code>
and <code>left</code> styles in order to move it.</p>
<p id="animationFrame">The
script uses <code>requestAnimationFrame</code> to schedule the <code>animate</code> function
to run whenever the browser is ready to repaint the screen. The
<code>animate</code> function itself again calls <code>requestAnimationFrame</code> to
schedule the next update. When the browser window (or tab) is active,
this will cause updates to happen at a rate of about 60 per second,
which tends to produce a good-looking animation.</p>
<p>If we just updated the DOM in a loop, the
page would freeze and nothing would show up on the screen. Browsers do
not update their display while a JavaScript program is running, nor do
they allow any interaction with the page. This is why we need
<code>requestAnimationFrame</code>—it lets the browser know that we are done
for now, and it can go ahead and do the things that browsers do, such
as updating the screen and responding to user actions.</p>
<p>Our animation function is passed the current
time as an argument, which it compares to the time it saw before (the
<code>lastTime</code> variable) to ensure the motion of the cat per millisecond
is stable, and the animation moves smoothly. If it just moved a fixed
amount per step, the motion would stutter if, for example, another
heavy task running on the same computer were to prevent the function
from running for a fraction of a second.</p>
<p id="sin_cos">Moving in
circles is done using the trigonometry functions <code>Math.cos</code> and
<code>Math.sin</code>. For those of you who aren&#8217;t familiar with these, I&#8217;ll
briefly introduce them since we will occasionally need them in this
book.</p>
<p><code>Math.cos</code> and <code>Math.sin</code> are useful for
finding points that lie on a circle around point (0,0) with a radius
of one unit. Both functions interpret their argument as the position
on this circle, with zero denoting the point on the far right of the
circle, going clockwise until 2π (about 6.28) has taken us around the
whole circle. <code>Math.cos</code> tells you the x-coordinate of the point that
corresponds to the given position around the circle, while <code>Math.sin</code>
yields the y-coordinate. Positions (or angles) greater than 2π or less than
0 are valid—the rotation repeats so that <em>a</em>+2π refers to the same
angle as <em>a</em>.</p>
<div class="image">
  <img src="img/cos_sin.svg" alt="Using cosine and sine to compute coordinates"/>
</div>
<p>The cat
animation code keeps a counter, <code>angle</code>, for the current angle of the
animation and increments it in proportion to the elapsed time every
time the <code>animate</code> function is called. It can then use this angle to
compute the current position of the image element. The <code>top</code> style is
computed with <code>Math.sin</code> and multiplied by 20, which is the vertical
radius of our circle. The <code>left</code> style is based on <code>Math.cos</code> and
multiplied by 200 so that the circle is much wider than it is high,
resulting in an elliptic motion.</p>
<p>Note that styles usually need <em>units</em>. In this case,
we have to append <code>"px"</code> to the number to tell the browser we are
counting in pixels (as opposed to centimeters, “ems”, or other
units). This is easy to forget. Using numbers without units will
result in your style being ignored—unless the number is 0, which
always means the same thing, regardless of its unit.</p>
</div>
<div id="ch13_sec14">
<h2>Summary</h2>
<p>JavaScript programs may inspect and interfere with the current
document that a browser is displaying through a data structure called
the DOM. This data structure represents the browser&#8217;s model of the
document, and a JavaScript program can modify it to change the visible
document.</p>
<p>The DOM is organized like a tree, in which elements are arranged
hierarchically according to the structure of the document. The objects
representing elements have properties such as <code>parentNode</code> and
<code>childNodes</code>, which can be used to navigate through this tree.</p>
<p>The way a document is displayed can be influenced by <em>styling</em>, both
by attaching styles to nodes directly and by defining rules that
match certain nodes. There are many different style properties, such as
<code>color</code> or <code>display</code>. JavaScript can manipulate an
element&#8217;s style directly through its <code>style</code> property.</p>
</div>
<div id="ch13_sec15">
<h2>Exercises</h2>
<h3 id="exercise_table">Build a table</h3>
<p>We built plaintext tables in
<a href="06_object.xhtml#tables">Chapter 6</a>. HTML makes laying out tables
quite a bit easier. An HTML table is built with the following tag
structure:</p>
<pre><span class="cm-tag">&lt;table></span>
  <span class="cm-tag">&lt;tr></span>
    <span class="cm-tag">&lt;th></span>name<span class="cm-tag">&lt;/th></span>
    <span class="cm-tag">&lt;th></span>height<span class="cm-tag">&lt;/th></span>
    <span class="cm-tag">&lt;th></span>country<span class="cm-tag">&lt;/th></span>
  <span class="cm-tag">&lt;/tr></span>
  <span class="cm-tag">&lt;tr></span>
    <span class="cm-tag">&lt;td></span>Kilimanjaro<span class="cm-tag">&lt;/td></span>
    <span class="cm-tag">&lt;td></span>5895<span class="cm-tag">&lt;/td></span>
    <span class="cm-tag">&lt;td></span>Tanzania<span class="cm-tag">&lt;/td></span>
  <span class="cm-tag">&lt;/tr></span>
<span class="cm-tag">&lt;/table></span></pre>
<p>For each
<em>row</em>, the <code>&lt;table&gt;</code> tag contains a <code>&lt;tr&gt;</code> tag. Inside of these <code>&lt;tr&gt;</code> tags,
we can put cell elements: either heading cells (<code>&lt;th&gt;</code>) or regular
cells (<code>&lt;td&gt;</code>).</p>
<p>The same
source data that was used in <a href="06_object.xhtml#mountains">Chapter 6</a>
is again available in the <code>MOUNTAINS</code> variable in the sandbox. It can also be <a href="http://eloquentjavascript.net/code/mountains.js">downloaded</a>
from the website(<a href="http://eloquentjavascript.net/code#13"><em>eloquentjavascript.net/code#13</em></a>).</p>
<p>Write a function <code>buildTable</code> that, given an array of objects that all
have the same set of properties, builds up a DOM structure
representing a table. The table should have a header row with the
property names wrapped in <code>&lt;th&gt;</code> elements and should have one subsequent row per
object in the array, with its property values in <code>&lt;td&gt;</code> elements.</p>
<p>The <code>Object.keys</code> function, which returns an
array containing the property names that an object has, will probably
be helpful here.</p>
<p>Once you have the basics
working, right-align cells containing numbers by setting their
<code>style.textAlign</code> property to <code>"right"</code>.</p>
<h3>Elements by tag name</h3>
<p>The
<code>getElementsByTagName</code> method returns all child elements with a given
tag name. Implement your own version of it as a regular nonmethod
function that takes a node and a string (the tag name) as arguments
and returns an array containing all descendant element nodes with the
given tag name.</p>
<p>To find the tag name of an element,
use its <code>tagName</code> property. But note that this will return the tag
name in all uppercase. Use the <code>toLowerCase</code> or <code>toUpperCase</code> string
method to compensate for this.</p>
<h3>The cat&#8217;s hat</h3>
<p>Extend the cat animation defined
<a href="13_dom.xhtml#animation">earlier</a> so that both the cat and his hat
(<code>&lt;img src="img/hat.png"&gt;</code>) orbit at opposite sides of the ellipse.</p>
<p>Or make the hat circle around the cat. Or alter the animation in some
other interesting way.</p>
<p>To make positioning multiple objects easier, it is probably a
good idea to switch to absolute positioning. This means that <code>top</code> and
<code>left</code> are counted relative to the top left of the document. To avoid
using negative coordinates, you can simply add a fixed number of
pixels to the position values.</p>
</div>
    </article>
  </body>
</html>

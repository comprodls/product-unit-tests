<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <title>Exercise Hints</title>
    <link rel="stylesheet" href="style.css"/>
  </head>
  <body>
    <article>

<h1 id="hints">Exercise Hints</h1>
<p>The hints below might help when you are stuck with one of the exercises in this book. They don&#8217;t give away the entire solution, but rather try to help you find it yourself.</p>
<div id="ch22_sec01">
<h2>Program Structure</h2>
<h3>Looping a triangle</h3>
<p>You can start with a program that simply
prints out the numbers 1 to 7, which you can derive by making a few
modifications to the
<a href="02_program_structure.xhtml#loops">even number printing example</a>
given earlier in the chapter, where the <code>for</code> loop was introduced.</p>
<p>Now consider the equivalence between numbers and strings of hash
characters. You can go from 1 to 2 by adding 1 (<code>+= 1</code>). You can go
from <code>"#"</code> to <code>"##"</code> by adding a character (<code>+= "#"</code>). Thus, your
solution can closely follow the number-printing program.</p>
<h3>FizzBuzz</h3>
<p>Going
over the numbers is clearly a looping job, and selecting what to print
is a matter of conditional execution. Remember the trick of using the
remainder (<code>%</code>) operator for checking whether a number is divisible by
another number (has a remainder of zero).</p>
<p>In the first version, there are three possible outcomes for every
number, so you&#8217;ll have to create an <code>if</code>/<code>else if</code>/<code>else</code> chain.</p>
<p>The second version of the
program has a straightforward solution and a clever one. The simple
way is to add another “branch” to precisely test the given condition.
For the clever method, build up a string containing the word or words
to output, and print either this word or the number if there is no
word, potentially by making elegant use of the <code>||</code> operator.</p>
<h3>Chess board</h3>
<p>The string can be built by starting with
an empty one (<code>""</code>) and repeatedly adding characters. A newline
character is written <code>"\n"</code>.</p>
<p>Use <code>console.log</code> to inspect the output of your program.</p>
<p>To work with two dimensions, you will need a
loop inside of a loop. Put curly braces around the bodies of
both loops to make it easy to see where they start and end. Try to
properly indent these bodies. The order of the loops must follow the
order in which we build up the string (line by line, left to right,
top to bottom). So the outer loop handles the lines and the inner loop
handles the characters on a line.</p>
<p>You&#8217;ll
need two variables to track your progress. To know whether to put a
space or a hash sign at a given position, you could test whether the
sum of the two counters is even (<code>% 2</code>).</p>
<p>Terminating a line by adding a newline character happens after the
line has been built up, so do this after the inner loop but inside of
the outer loop.</p>
</div>
<div id="ch22_sec02">
<h2>Functions</h2>
<h3>Minimum</h3>
<p>If you have trouble putting braces and
parentheses in the right place to get a valid function definition,
start by copying one of the examples in this chapter and modifying it.</p>
<p>A function may contain multiple <code>return</code>
statements.</p>
<h3>Recursion</h3>
<p>Your
function will likely look somewhat similar to the inner <code>find</code>
function in the recursive <code>findSolution</code>
<a href="03_functions.xhtml#recursive_puzzle">example</a> in this chapter, with
an <code>if</code>/<code>else if</code>/<code>else</code> chain that tests which of the three cases
applies. The final <code>else</code>, corresponding to the third case, makes the
recursive call. Each of the branches should contain a <code>return</code>
statement or in some other way arrange for a specific value to be
returned.</p>
<p>When given a negative number, the function will
recurse again and again, passing itself an ever more negative number,
thus getting further and further away from returning a result. It will
eventually run out of stack space and abort.</p>
<h3>Bean counting</h3>
<p>A loop in your function will have
to look at every character in the string by running an index from zero
to one below its length (<code>&lt; string.length</code>). If the character at the
current position is the same as the one the function is looking for,
it adds 1 to a counter variable. Once the loop has finished, the
counter can be returned.</p>
<p>Take care to make all the variables used in the
function <em>local</em> to the function by using the <code>var</code> keyword.</p>
</div>
<div id="ch22_sec03">
<h2>Data Structures: Objects and Arrays</h2>
<h3>The sum of a range</h3>
<p>Building up an array is most easily done by first
initializing a variable to <code>[]</code> (a fresh, empty array) and repeatedly
calling its <code>push</code> method to add a value. Don&#8217;t forget to return the
array at the end of the function.</p>
<p>Since the end boundary is
inclusive, you&#8217;ll need to use the <code>&lt;=</code> operator rather than simply <code>&lt;</code>
to check for the end of your loop.</p>
<p>To check whether the optional step argument was
given, either check <code>arguments.length</code> or compare the value of the
argument to <code>undefined</code>. If it wasn&#8217;t given, simply set it to its
default value (1) at the top of the function.</p>
<p>Having <code>range</code> understand negative
step values is probably best done by writing two separate loops—one
for counting up and one for counting down—because the comparison that
checks whether the loop is finished needs to be <code>&gt;=</code> rather than <code>&lt;=</code>
when counting downward.</p>
<p>It might also be worthwhile to use a different default step, namely,
-1, when the end of the range is smaller than the start. That way,
<code>range(5, 2)</code> returns something meaningful, rather than getting stuck
in an infinite loop.</p>
<h3>Reversing an array</h3>
<p>There are two obvious ways to implement
<code>reverseArray</code>. The first is to simply go over the input array from
front to back and use the <code>unshift</code> method on the new array to insert
each element at its start. The second is to loop over the input array
backward and use the <code>push</code> method. Iterating over an array backward
requires a (somewhat awkward) <code>for</code> specification like <code>(var i =
array.length - 1; i &gt;= 0; i--)</code>.</p>
<p>Reversing the array in place is harder. You have to be careful not to
overwrite elements that you will later need. Using <code>reverseArray</code> or
otherwise copying the whole array (<code>array.slice(0)</code> is a good way to
copy an array) works but is cheating.</p>
<p>The trick is to <em>swap</em> the first and last elements, then the
second and second-to-last, and so on. You can do this by looping
over half the length of the array (use <code>Math.floor</code> to round down—you
don&#8217;t need to touch the middle element in an array with an odd
length) and swapping the element at position <code>i</code> with the one at
position <code>array.length - 1 - i</code>. You can use a local variable to
briefly hold on to one of the elements, overwrite that one with its
mirror image, and then put the value from the local variable in the
place where the mirror image used to be.</p>
<h3>A list</h3>
<p>Building up a list is best done
back to front. So <code>arrayToList</code> could iterate over the array backward
(see previous exercise) and, for each element, add an object to the
list. You can use a local variable to hold the part of the list that
was built so far and use a pattern like <code>list = {value: X, rest:
list}</code> to add an element.</p>
<p>To run over a list (in <code>listToArray</code> and <code>nth</code>), a <code>for</code>
loop specification like this can be used:</p>
<pre><span class="cm-keyword">for</span> (<span class="cm-keyword">var</span> <span class="cm-variable">node</span> <span class="cm-operator">=</span> <span class="cm-variable">list</span>; <span class="cm-variable">node</span>; <span class="cm-variable">node</span> <span class="cm-operator">=</span> <span class="cm-variable">node</span>.<span class="cm-property">rest</span>) {}</pre>
<p>Can you see how that works? Every iteration of the loop, <code>node</code> points
to the current sublist, and the body can read its <code>value</code> property to
get the current element. At the end of an iteration, <code>node</code> moves to
the next sublist. When that is null, we have reached the end of the
list and the loop is finished.</p>
<p>The recursive version of <code>nth</code> will, similarly, look at
an ever smaller part of the “tail” of the list and at the same time
count down the index until it reaches zero, at which point it can
return the <code>value</code> property of the node it is looking at. To get the
zeroeth element of a list, you simply take the <code>value</code> property of its
head node. To get element <em>N</em> + 1, you take the <em>N</em>th element of the
list that&#8217;s in this list&#8217;s <code>rest</code> property.</p>
<h3>Deep comparison</h3>
<p>Your test for whether you are dealing with a
real object will look something like <code>typeof x == "object" &amp;&amp; x !=
null</code>. Be careful to compare properties only when <em>both</em> arguments are
objects. In all other cases you can just immediately return the result
of applying <code>===</code>.</p>
<p>Use a <code>for</code>/<code>in</code> loop to go over the
properties. You need to test whether both objects have the same set of
property names and whether those properties have identical values. The
first test can be done by counting the properties in both objects and
returning false if the numbers of properties are different. If they&#8217;re
the same, then go over the properties of one object, and for each of
them, verify that the other object also has the property. The values
of the properties are compared by a recursive call to <code>deepEqual</code>.</p>
<p>Returning the correct value from the function is
best done by immediately returning false when a mismatch is noticed
and returning true at the end of the function.</p>
</div>
<div id="ch22_sec04">
<h2>Higher-Order Functions</h2>
<h3>Mother-child age difference</h3>
<p>Because not all elements in
the <code>ancestry</code> array produce useful data (we can&#8217;t compute the age
difference unless we know the birth date of the mother), we will have
to apply <code>filter</code> in some manner before calling <code>average</code>. You could
do it as a first pass, by defining a <code>hasKnownMother</code> function and
filtering on that first. Alternatively, you could start by calling
<code>map</code> and in your mapping function return either the age difference
or <code>null</code> if no mother is known. Then, you can call <code>filter</code> to remove
the <code>null</code> elements before passing the array to <code>average</code>.</p>
<h3>Historical life expectancy</h3>
<p>The essence of this example lies in
grouping the elements of a collection by some aspect of
theirs—splitting the array of ancestors into smaller arrays with the
ancestors for each century.</p>
<p>During the grouping
process, keep an object that associates century names (numbers)
with arrays of either person objects or ages. Since we do not know in
advance what categories we will find, we&#8217;ll have to create them on the
fly. For each person, after computing their century, we test whether
that century was already known. If not, add an array for it. Then add
the person (or age) to the array for the proper century.</p>
<p>Finally, a <code>for</code>/<code>in</code> loop can
be used to print the average ages for the individual centuries.</p>
<h3>Every and then some</h3>
<p>The functions can follow a similar pattern to the
<a href="05_higher_order.xhtml#forEach">definition</a> of <code>forEach</code> at the
start of the chapter, except that they must return immediately (with
the right value) when the predicate function returns false—or true.
Don&#8217;t forget to put another <code>return</code> statement after the loop so that
the function also returns the correct value when it reaches the end of
the array.</p>
</div>
<div id="ch22_sec05">
<h2>The Secret Life of Objects</h2>
<h3>A vector type</h3>
<p>Your solution can follow the pattern of the
<code>Rabbit</code> constructor from this chapter quite closely.</p>
<p>Adding a getter property to the
constructor can be done with the <code>Object.defineProperty</code> function. To
compute the distance from (0, 0) to (x, y), you can use the
Pythagorean theorem, which says that the square of the distance we are
looking for is equal to the square of the x-coordinate plus the square
of the y-coordinate. Thus, √(x<sup>2</sup> + y<sup>2</sup>)
is the number you want, and <code>Math.sqrt</code> is the way you compute a square
root in JavaScript.</p>
<h3>Another cell</h3>
<p>You&#8217;ll have to store all three constructor
arguments in the instance object. The <code>minWidth</code> and <code>minHeight</code>
methods should call through to the corresponding methods in the
<code>inner</code> cell but ensure that no number less than the given size is
returned (possibly using <code>Math.max</code>).</p>
<p>Don&#8217;t forget to add a <code>draw</code> method that simply forwards the call to
the inner cell.</p>
<h3>Sequence interface</h3>
<p>One way to solve this is to
give the sequence objects <em>state</em>, meaning their properties are
changed in the process of using them. You could store a counter that
indicates how far the sequence object has advanced.</p>
<p>Your interface will need to expose at least a way to get the next
element and to find out whether the iteration has reached the end of
the sequence yet. It is tempting to roll these into one method,
<code>next</code>, which returns <code>null</code> or <code>undefined</code> when the sequence is at
its end. But now you have a problem when a sequence actually contains
<code>null</code>. So a separate method (or getter property) to find out whether
the end has been reached is probably preferable.</p>
<p>Another solution is
to avoid changing state in the object. You can expose a method for
getting the current element (without advancing any counter) and
another for getting a new sequence that represents the remaining
elements after the current one (or a special value if the end of the
sequence is reached). This is quite elegant—a sequence value will
“stay itself” even after it is used and can thus be shared with other
code without worrying about what might happen to it. It is,
unfortunately, also somewhat inefficient in a language like
JavaScript because it involves creating a lot of objects during
iteration.</p>
</div>
<div id="ch22_sec06">
<h2>Project: Electronic Life</h2>
<h3>Artificial stupidity</h3>
<p>The greediness problem can be
attacked in several ways. The critters could stop eating when they
reach a certain energy level. Or they could eat only every N turns (by
keeping a counter of the turns since their last meal in a property on
the creature object). Or, to make sure plants never go entirely
extinct, the animals could refuse to eat a plant unless they see
at least one other plant nearby (using the <code>findAll</code> method on the
view). A combination of these, or some entirely different strategy,
might also work.</p>
<p>Making the critters move more
effectively could be done by stealing one of the movement strategies
from the critters in our old, energyless world. Both the bouncing
behavior and the wall-following behavior showed a much wider range of
movement than completely random staggering.</p>
<p>Making creatures breed more slowly is
trivial. Just increase the minimum energy level at which they
reproduce. Of course, making the ecosystem more stable also makes it
more boring. If you have a handful of fat, immobile critters forever
munching on a sea of plants and never reproducing, that makes for a
very stable ecosystem. But no one wants to watch that.</p>
<h3>Predators</h3>
<p>Many of
the same tricks that worked for the previous exercise also apply here.
Making the predators big (lots of energy) and having them reproduce
slowly is recommended. That&#8217;ll make them less vulnerable to periods of
starvation when the herbivores are scarce.</p>
<p>Beyond staying alive, keeping its food stock alive is a
predator&#8217;s main objective. Find some way to make predators hunt
more aggressively when there are a lot of herbivores and hunt more
slowly (or not at all) when prey is rare. Since plant eaters move
around, the simple trick of eating one only when others are nearby is
unlikely to work—that&#8217;ll happen so rarely that your predator will
starve. But you could keep track of observations in previous turns, in
some data structure kept on the predator objects, and have it base
its behavior on what it has seen recently.</p>
</div>
<div id="ch22_sec07">
<h2>Bugs and Error Handling</h2>
<h3>Retry</h3>
<p>The call to <code>primitiveMultiply</code> should
obviously happen in a <code>try</code> block. The corresponding <code>catch</code> block
should rethrow the exception when it is not an instance of
<code>MultiplicatorUnitFailure</code> and ensure the call is retried when it is.</p>
<p>To do the retrying, you can either use a loop that breaks only when a
call succeeds—as in the <a href="08_error.xhtml#look"><code>look</code> example</a>
earlier in this chapter—or use recursion and hope you don&#8217;t get a
string of failures so long that it overflows the stack (which is a
pretty safe bet).</p>
<h3>The locked box</h3>
<p>This
exercise calls for a <code>finally</code> block, as you probably guessed. Your
function should first unlock the box and then call the argument function
from inside a <code>try</code> body. The <code>finally</code> block after it should lock the
box again.</p>
<p>To make sure we don&#8217;t lock the box when it wasn&#8217;t already locked,
check its lock at the start of the function and unlock and lock
it only  when it started out locked.</p>
</div>
<div id="ch22_sec08">
<h2>Regular Expressions</h2>
<h3>Quoting style</h3>
<p>The most obvious solution
is to only replace quotes with a nonword character on at least one
side. Something like <code>/\W'|'\W/</code>. But you also have to take the start
and end of the line into account.</p>
<p>In addition, you must ensure that
the replacement also includes the characters that were matched by the
<code>\W</code> pattern so that those are not dropped. This can be done by
wrapping them in parentheses and including their groups in the
replacement string (<code>$1</code>, <code>$2</code>). Groups that are not matched will be
replaced by nothing.</p>
<h3>Numbers again</h3>
<p>First, do
not forget the backslash in front of the dot.</p>
<p>Matching the optional sign in front of the number, as well as
in front of the exponent, can be done with <code>[+\-]?</code> or <code>(\+|-|)</code>
(plus, minus, or nothing).</p>
<p>The more complicated part of the exercise is the
problem of matching both <code>"5."</code> and <code>".5"</code> without also matching
<code>"."</code>. For this, a good solution is to use the <code>|</code> operator to
separate the two cases—either one or more digits optionally followed
by a dot and zero or more digits <em>or</em> a dot followed by one or more
digits.</p>
<p>Finally, to make the <em>e</em> case-insensitive, either
add an <code>i</code> option to the regular expression or use <code>[eE]</code>.</p>
</div>
<div id="ch22_sec09">
<h2>Modules</h2>
<h3>Month names</h3>
<p>This follows the <code>weekDay</code> module almost
exactly. A function expression, called immediately, wraps the variable
that holds the array of names, along with the two functions that must
be exported. The functions are put in an object and returned. The
returned interface object is stored in the <code>month</code> variable.</p>
<h3>A return to electronic life</h3>
<p>Here is what I came up with. I&#8217;ve put parentheses around internal
functions.</p>
<pre>Module "grid"
  Vector
  Grid
  directions
  directionNames

Module "world"
  (randomElement)
  (elementFromChar)
  (charFromElement)
  View
  World
  LifelikeWorld
  directions [reexported]

Module "simple_ecosystem"
  (randomElement) [duplicated]
  (dirPlus)
  Wall
  BouncingCritter
  WallFollower

Module "ecosystem"
  Wall [duplicated]
  Plant
  PlantEater
  SmartPlantEater
  Tiger</pre>
<p>I have reexported the <code>directions</code> array from the
<code>grid</code> module from <code>world</code> so that modules built on that (the
ecosystems) don&#8217;t have to know or worry about the existence of the
<code>grid</code> module.</p>
<p>I also duplicated two generic and tiny helper values
(<code>randomElement</code> and <code>Wall</code>) since they are used as internal details
in different contexts and do not belong in the interfaces for these
modules.</p>
<h3>Circular dependencies</h3>
<p>The trick
is to add the <code>exports</code> object created for a module to <code>require</code>'s
cache <em>before</em> actually running the module. This means the module
will not yet have had a chance to override <code>module.exports</code>, so we do
not know whether it may want to export some other value. After
loading, the cache object is overridden with <code>module.exports</code>, which
may be a different value.</p>
<p>But if in the course of loading the module, a second module is loaded
that asks for the first module, its default <code>exports</code> object, which is likely
still empty at this point, will be in the cache, and the second module
will receive a reference to it. If it doesn&#8217;t try to do anything with
the object until the first module has finished loading, things will
work.</p>
</div>
<div id="ch22_sec10">
<h2>Project: A Programming Language</h2>
<h3>Arrays</h3>
<p>The easiest way to do this is to represent Egg arrays
with JavaScript arrays.</p>
<p>The values added to the top environment must be
functions. <code>Array.prototype.slice</code> can be used to convert an
<code>arguments</code> array-like object into a regular array.</p>
<h3>Closure</h3>
<p>Again, we are riding along on a JavaScript mechanism to
get the equivalent feature in Egg. Special forms are passed the local
environment in which they are evaluated so that they can evaluate
their subforms in that environment. The function returned by <code>fun</code>
closes over the <code>env</code> argument given to its enclosing function and
uses that to create the function&#8217;s local environment when it is
called.</p>
<p>This means that the prototype of the local
environment will be the environment in which the function was created,
which makes it possible to access variables in that environment from
the function. This is all there is to implementing closure (though to
compile it in a way that is actually efficient, you&#8217;d need to do some
more work).</p>
<h3>Comments</h3>
<p>Make sure your solution handles multiple comments in a
row, with potentially whitespace between or after them.</p>
<p>A regular expression is probably the easiest way to solve this.
Write something that matches “whitespace or a comment, zero or more
times”. Use the <code>exec</code> or <code>match</code> method and look at the length of
the first element in the returned array (the whole match) to find out
how many characters to slice off.</p>
<h3>Fixing scope</h3>
<p>You will have to loop through
one scope at a time, using <code>Object.getPrototypeOf</code> to go the next
outer scope. For each scope, use <code>hasOwnProperty</code> to find out whether the
variable, indicated by the <code>name</code> property of the first argument to
<code>set</code>, exists in that scope. If it does, set it to the result of
evaluating the second argument to <code>set</code> and then return that value.</p>
<p>If the outermost scope is
reached (<code>Object.getPrototypeOf</code> returns null) and we haven&#8217;t found
the variable yet, it doesn&#8217;t exist, and an error should be thrown.</p>
</div>
<div id="ch22_sec11">
<h2>The Document Object Model</h2>
<h3>Build a table</h3>
<p>Use <code>document.createElement</code> to create new element nodes,
<code>document.createTextNode</code> to create text nodes, and the <code>appendChild</code>
method to put nodes into other nodes.</p>
<p>You should loop over the key names once to fill in the top row and
then again for each object in the array to construct the data
rows.</p>
<p>Don&#8217;t forget to return the enclosing <code>&lt;table&gt;</code> element at the end of
the function.</p>
<h3>Elements by tag name</h3>
<p>The solution is most
easily expressed with a recursive function, similar to the
<a href="13_dom.xhtml#talksAbout"><code>talksAbout</code> function</a> defined earlier in
this chapter.</p>
<p>You could call
<code>byTagname</code> itself recursively, concatenating the resulting arrays to
produce the output. For a more efficient approach, define an inner
function that calls itself recursively and that has access to an
array variable defined in the outer function to which it can add the
matching elements it finds. Don&#8217;t forget to call the inner function once from the outer function.</p>
<p>The recursive function
must check the node type. Here we are interested only in node type 1
(<code>document.ELEMENT_NODE</code>). For such nodes, we must loop over their
children and, for each child, see whether the child matches the query while also doing
a recursive call on it to inspect its own children.</p>
</div>
<div id="ch22_sec12">
<h2>Handling Events</h2>
<h3>Censored keyboard</h3>
<p>The solution to this
exercise involves preventing the default behavior of key events.
You can handle either <code>"keypress"</code> or <code>"keydown"</code>. If either of them
has <code>preventDefault</code> called on it, the letter will not appear.</p>
<p>Identifying the letter typed requires
looking at the <code>keyCode</code> or <code>charCode</code> property and comparing that
with the codes for the letters you want to filter. In <code>"keydown"</code>, you
do not have to worry about lowercase and uppercase letters, since it
identifies only  the key pressed. If you decide to handle <code>"keypress"</code>
instead, which identifies the actual character typed, you have to make
sure you test for both cases. One way to do that would be this:</p>
<pre>/[qwx]/i.test(String.fromCharCode(event.charCode))</pre>
<h3>Mouse trail</h3>
<p>Creating the elements is best done in a
loop. Append them to the document to make them show up. To be
able to access them later to change their position, store the trail
elements in an array.</p>
<p>Cycling through them can be done by keeping a counter variable and adding 1 to it every time the <code>"mousemove"</code> event
fires. The remainder operator (<code>% 10</code>) can then be used to get a valid
array index to pick the element you want to position during a given
event.</p>
<p>Another
interesting effect can be achieved by modeling a simple physics
system. Use the <code>"mousemove"</code> event only to update a pair of variables
that track the mouse position. Then use <code>requestAnimationFrame</code> to
simulate the trailing elements being attracted to the position of the
mouse pointer. At every animation step, update their position based on
their position relative to the pointer (and, optionally, a speed that
is stored for each element). Figuring out a good way to do this is up
to you.</p>
<h3>Tabs</h3>
<p>One pitfall you&#8217;ll
probably run into is that you can&#8217;t directly use the node&#8217;s
<code>childNodes</code> property as a collection of tab nodes. For one thing,
when you add the buttons, they will also become child nodes and end
up in this object because it is live. For another, the text nodes
created for the whitespace between the nodes are also in there
and should not get their own tabs.</p>
<p>To work around this, start
by building up a real array of all the children in the wrapper that
have a <code>nodeType</code> of 1.</p>
<p>When registering event handlers on
the buttons, the handler functions will need to know which tab element
is associated with the button. If they are created in a normal loop,
you can access the loop index variable from inside the function, but
it won&#8217;t give you the correct number because that variable will have
been further changed by the loop.</p>
<p>A simple workaround
is to use the <code>forEach</code> method and create the handler functions from
inside the function passed to <code>forEach</code>. The loop index, which is
passed as a second argument to that function, will be a normal local
variable there and won&#8217;t be overwritten by further iterations.</p>
</div>
<div id="ch22_sec13">
<h2>Project: A Platform Game</h2>
<h3>Game over</h3>
<p>The most obvious solution
would be to make <code>lives</code> a variable that lives in <code>runGame</code> and is
thus visible to the <code>startLevel</code> closure.</p>
<p>Another approach, which fits nicely with the spirit of the rest of the
function, would be to add a second parameter to <code>startLevel</code> that
gives the number of lives. When the whole state of a system is stored
in the arguments to a function, calling that function provides an
elegant way to transition to a new state.</p>
<p>In any case, when a level is lost, there should now be two
possible state transitions. If that was the last life, we go back to
level zero with the starting amount of lives. If not, we repeat the
current level with one less life remaining.</p>
<h3>Pausing the game</h3>
<p>An animation can be interrupted by
returning <code>false</code> from the function given to <code>runAnimation</code>. It can be
continued by calling <code>runAnimation</code> again.</p>
<p>To communicate that the animation should be
interrupted to the function passed to <code>runAnimation</code> so that it can
return <code>false</code>, you can use a variable that both the event handler and
that function have access to.</p>
<p>When finding a way to unregister the handlers registered by
<code>trackKeys</code>, remember that the <em>exact</em> same function value that was
passed to <code>addEventListener</code> must be passed to <code>removeEventListener</code>
to successfully remove a handler. Thus, the <code>handler</code> function value
created in <code>trackKeys</code> must be available to the code that unregisters
the handlers.</p>
<p>You can add a property to the object returned by <code>trackKeys</code>,
containing either that function value or a method that handles the
unregistering directly.</p>
</div>
<div id="ch22_sec14">
<h2>Drawing on Canvas</h2>
<h3>Shapes</h3>
<p>The trapezoid (1) is easy to draw using
a path. Pick suitable center coordinates and add each of the four
corners around that.</p>
<p>The diamond (2) can
be drawn the easy way, with a path, or the interesting way, with a
<code>rotate</code> transformation. To use rotation, you will have to apply a
trick similar to what we did in the <code>flipHorizontally</code> function.
Because you want to rotate around the center of your rectangle and
not around the point (0,0), you must first <code>translate</code> to there, then
rotate, and then translate back.</p>
<p>For the zigzag (3) it
becomes impractical to write a new call to <code>lineTo</code> for each line
segment. Instead, you should use a loop. You can have each
iteration draw either two line segments (right and then left again) or
one, in which case you must use the evenness (<code>% 2</code>) of the loop index
to determine whether to go left or right.</p>
<p>You&#8217;ll also need a loop for the spiral (4). If you draw a series
of points, with each point moving further along a circle around the
spiral&#8217;s center, you get a circle. If, during the loop, you vary the
radius of the circle on which you are putting the current point and
go around more than once, the result is a spiral.</p>
<p>The star (5) depicted is built out of
<code>quadraticCurveTo</code> lines. You could also draw one with straight lines.
Divide a circle into eight pieces, or a piece for each point you want your
star to have. Draw lines between these points, making them curve
toward the center of the star. With <code>quadraticCurveTo</code>, you can use
the center as the control point.</p>
<h3>The pie chart</h3>
<p>You will need to call <code>fillText</code>
and set the context&#8217;s <code>textAlign</code> and <code>textBaseline</code> properties in
such a way that the text ends up where you want it.</p>
<p>A sensible way to position the labels would be to put the text on the
line going from the center of the pie through the middle of the slice.
You don&#8217;t want to put the text directly against the side of the pie
but rather move the text out to the side of the pie by a given number of pixels.</p>
<p>The angle of this line is <code>currentAngle + 0.5 * sliceAngle</code>. The
following code finds a position on this line, 120 pixels from the center:</p>
<pre><span class="cm-keyword">var</span> <span class="cm-variable">middleAngle</span> <span class="cm-operator">=</span> <span class="cm-variable">currentAngle</span> <span class="cm-operator">+</span> <span class="cm-number">0.5</span> <span class="cm-operator">*</span> <span class="cm-variable">sliceAngle</span>;
<span class="cm-keyword">var</span> <span class="cm-variable">textX</span> <span class="cm-operator">=</span> <span class="cm-variable">Math</span>.<span class="cm-property">cos</span>(<span class="cm-variable">middleAngle</span>) <span class="cm-operator">*</span> <span class="cm-number">120</span> <span class="cm-operator">+</span> <span class="cm-variable">centerX</span>;
<span class="cm-keyword">var</span> <span class="cm-variable">textY</span> <span class="cm-operator">=</span> <span class="cm-variable">Math</span>.<span class="cm-property">sin</span>(<span class="cm-variable">middleAngle</span>) <span class="cm-operator">*</span> <span class="cm-number">120</span> <span class="cm-operator">+</span> <span class="cm-variable">centerY</span>;</pre>
<p>For <code>textBaseline</code>, the value <code>"middle"</code> is probably appropriate when
using this approach. What to use for <code>textAlign</code> depends on the side
of the circle we are on. On the left, it should be <code>"right"</code>, and on
the right, it should be <code>"left"</code> so that the text is positioned away
from the pie.</p>
<p>If you are not sure how to find out which side
of the circle a given angle is on, look to the explanation of
<code>Math.cos</code> in the previous exercise. The cosine of an angle tells us
which x-coordinate it corresponds to, which in turn tells us exactly
which side of the circle we are on.</p>
<h3>A bouncing ball</h3>
<p>A box is
easy to draw with <code>strokeRect</code>. Define a variable that holds its size
or define two variables if your box&#8217;s width and height differ. To create a
round ball, start a path, call <code>arc(x, y, radius, 0, 7)</code>, which creates an arc
going from zero to more than a whole circle, and fill it.</p>
<p>To model the ball&#8217;s position
and speed, you can use the <code>Vector</code> type from
<a href="15_game.xhtml#vector">Chapter 15</a>. Give it a starting speed, preferably one that is not purely
vertical or horizontal, and every frame, multiply that speed with
the amount of time that elapsed. When the ball gets too close to a
vertical wall, invert the x component in its speed. Likewise, invert
the y component when it hits a horizontal wall.</p>
<p>After finding the ball&#8217;s new
position and speed, use <code>clearRect</code> to delete the scene and redraw it
using the new position.</p>
<h3>Precomputed mirroring</h3>
<p>The key to the solution
is the fact that we can use a canvas element as a source image
when using <code>drawImage</code>. It is possible to create an extra <code>&lt;canvas&gt;</code>
element, without adding it to the document, and draw our inverted
sprites to it, once. When drawing an actual frame, we just copy the
already inverted sprites to the main canvas.</p>
<p>Some care would be required because images do not load
instantly. We do the inverted drawing only  once, and if we do it
before the image loads, it won&#8217;t draw anything. A <code>"load"</code> handler on
the image can be used to draw the inverted images to the extra canvas.
This canvas can be used as a drawing source immediately (it&#8217;ll simply
be blank until we draw the character onto it).</p>
</div>
<div id="ch22_sec15">
<h2>HTTP</h2>
<h3>Content negotiation</h3>
<p>See the
various examples of using an <code>XMLHttpRequest</code> in this chapter for an
example of the method calls involved in making a request. You can use
a synchronous request (by setting the third parameter to <code>open</code> to
<code>false</code>) if you want.</p>
<p>Asking for a bogus
media type will return a response with code 406, “Not acceptable”,
which is the code a server should return when it can&#8217;t fulfill the
<code>Accept</code> header.</p>
<h3>Waiting for multiple promises</h3>
<p>The
function passed to the <code>Promise</code> constructor will have to call <code>then</code>
on each of the promises in the given array. When one of them succeeds,
two things need to happen. The resulting value needs to be stored in
the correct position of a result array, and we must check whether this
was the last pending promise and finish our own promise if it
was.</p>
<p>The latter can be done with a counter, which is
initialized to the length of the input array and from which we subtract
1 every time a promise succeeds. When it reaches 0, we are
done. Make sure you take the situation where the input array is empty
(and thus no promise will ever resolve) into account.</p>
<p>Handling failure requires some thought but turns out to be extremely
simple. Just pass the failure function of the wrapping promise to each
of the promises in the array so that a failure in one of them
triggers the failure of the whole wrapper.</p>
</div>
<div id="ch22_sec16">
<h2>Forms and Form Fields</h2>
<h3>A JavaScript workbench</h3>
<p>Use <code>document.querySelector</code>
or <code>document.getElementById</code> to get access to the elements defined in
your HTML. An event handler for <code>"click"</code> or <code>"mousedown"</code> events on
the button can get the <code>value</code> property of the text field and call
<code>new Function</code> on it.</p>
<p>Make sure you wrap both the
call to <code>new Function</code> and the call to its result in a <code>try</code> block so
that you can catch exceptions that it produces. In this case, we
really don&#8217;t know what type of exception we are looking for, so catch
everything.</p>
<p>The <code>textContent</code> property of the
output element can be used to fill it with a string message. Or, if
you want to keep the old content around, create a new text node using
<code>document.createTextNode</code> and append it to the element. Remember to
add a newline character to the end so that not all output appears on
a single line.</p>
<h3>Autocompletion</h3>
<p>The best event for
updating the suggestion list is <code>"input"</code> since that will fire
immediately when the content of the field is changed.</p>
<p>Then loop over the array
of terms and see whether they start with the given string. For example, you
could call <code>indexOf</code> and see whether the result is zero. For each matching
string, add an element to the suggestions <code>&lt;div&gt;</code>. You should probably
also empty that each time you start updating the suggestions, for
example by setting its <code>textContent</code> to the empty string.</p>
<p>You could either add
a <code>"click"</code> event handler to every suggestion element or add a single
one to the outer <code>&lt;div&gt;</code> that holds them and look at the <code>target</code>
property of the event to find out which suggestion was clicked.</p>
<p>To get the suggestion text out of a DOM node, you could
look at its <code>textContent</code> or set an attribute to explicitly store the
text when you create the element.</p>
<h3>Conway&#8217;s Game of Life</h3>
<p>To solve the problem of having the
changes conceptually happen at the same time, try to see the
computation of a generation as a pure function, which takes
one grid and produces a new grid that represents the next turn.</p>
<p>Representing the grid can be done in any of the ways shown in Chapters
<a href="07_elife.xhtml#grid">7</a> and <a href="15_game.xhtml#level">15</a>. Counting
live neighbors can be done with two nested loops, looping over
adjacent coordinates. Take care not to count cells outside of the
field and to ignore the cell in the center, whose neighbors we are
counting.</p>
<p>Making changes to checkboxes
take effect on the next generation can be done in two ways. An event
handler could notice these changes and update the current grid to
reflect them, or you could generate a fresh grid from the values in
the checkboxes before computing the next turn.</p>
<p>If you choose to go with event handlers, you might want to attach
attributes that identify the position that each checkbox
corresponds to so that it is easy to find out which cell to change.</p>
<p>To draw the grid
of checkboxes, you either can use  a <code>&lt;table&gt;</code> element (see
<a href="13_dom.xhtml#exercise_table">Chapter 13</a>) or simply put them all in
the same element and put <code>&lt;br&gt;</code> (line break) elements between the
rows.</p>
</div>
<div id="ch22_sec17">
<h2>Project: A Paint Program</h2>
<h3>Rectangles</h3>
<p>You can use <code>relativePos</code> to find the corner
corresponding to the start of the mouse drag. Figuring out where the
drag ends can be done with <code>trackDrag</code> or by registering your own
event handler.</p>
<p>When you have two corners of the rectangle, you must
somehow translate these into the arguments that <code>fillRect</code> expects:
the top-left corner, width, and height of the rectangle. <code>Math.min</code>
can be used to find the leftmost x-coordinate and topmost
y-coordinate. To get the width or height, you can call <code>Math.abs</code> (the
absolute value) on the difference between two sides.</p>
<p>Showing the rectangle during the mouse drag requires
a similar set of numbers but in the context of the whole page rather
than relative to the canvas. Consider writing a function <code>findRect</code>,
which converts two points into an object with <code>top</code>, <code>left</code>, <code>width</code>,
and <code>height</code> properties so that you don&#8217;t have to write the same
logic twice.</p>
<p>You can then create a <code>&lt;div&gt;</code> node and set its
<code>style.position</code> to <code>absolute</code>. When setting positioning styles, do
not forget to append <code>"px"</code> to the numbers. The node must be added to
the document (you can append it to <code>document.body</code>) and also removed
again when the drag ends and the actual rectangle gets drawn onto the
canvas.</p>
<h3>Color picker</h3>
<p>You&#8217;ll again need to use <code>relativePos</code> to find out which
pixel was clicked. The <code>pixelAt</code> function in the example demonstrates how to get
the values for a given pixel. Putting those into an <code>rgb</code> string
merely requires some string concatenation.</p>
<p>Make sure you verify
that the exception you catch is an instance of <code>SecurityError</code> so
that you don&#8217;t accidentally handle the wrong kind of exception.</p>
<h3>Flood fill</h3>
<p>Given a
pair of starting coordinates and the image data for the whole
canvas, this approach should work:</p>
<div class="olist arabic"><ol class="arabic">
<li>
<p>
Create an array to hold information about already colored
    coordinates.
</p>
</li>
<li>
<p>
Create a work list array to hold coordinates that must be looked
    at. Put the start position in it.
</p>
</li>
<li>
<p>
When the work list is empty, we are done.
</p>
</li>
<li>
<p>
Remove one pair of coordinates from the work list.
</p>
</li>
<li>
<p>
If those coordinates are already in our array of colored pixels, go
    back to step 3.
</p>
</li>
<li>
<p>
Color the pixel at the current coordinates and add the
    coordinates to the array of colored pixels.
</p>
</li>
<li>
<p>
Add the coordinates of each adjacent pixel whose color is the same
    as the starting pixel&#8217;s original color to the work list.
</p>
</li>
<li>
<p>
Return to step 3.
</p>
</li>
</ol></div>
<p>The work list can simply be an array of vector objects. The data
structure that tracks colored pixels will be consulted <em>very</em> often.
Searching through the whole thing every time a new pixel is visited
will take a lot of time. You could instead create an array that has a
value in it for every pixel, using again the x + y × width scheme for
associating positions with pixels. When checking whether a pixel has
been colored already, you could directly access the field corresponding to the
current pixel.</p>
<p>You can compare colors by running over
the relevant part of the data array, comparing one field at a time. Or
you can “condense” a color to a single number or string and
compare those. When doing this, ensure that every color produces a
unique value. For example, simply adding the color&#8217;s components is not
safe since multiple colors will have the same sum.</p>
<p>When enumerating the neighbors of a given point, take care to exclude
neighbors that are not inside of the canvas or your program might run
off into one direction forever.</p>
</div>
<div id="ch22_sec18">
<h2>Node.js</h2>
<h3>Content negotiation, again</h3>
<p>Don&#8217;t forget to call the <code>end</code> method on the object
returned by <code>http.request</code> in order to actually fire off the request.</p>
<p>The response object passed to <code>http.request</code>’s callback
is a readable stream. This means that it is not entirely trivial
to get the whole response body from it. The following utility
function reads a whole stream and calls a callback function with the
result, using the usual pattern of passing any errors it encounters as
the first argument to the callback:</p>
<pre><span class="cm-keyword">function</span> <span class="cm-variable">readStreamAsString</span>(<span class="cm-def">stream</span>, <span class="cm-def">callback</span>) {
  <span class="cm-keyword">var</span> <span class="cm-def">data</span> <span class="cm-operator">=</span> <span class="cm-string">""</span>;
  <span class="cm-variable-2">stream</span>.<span class="cm-property">on</span>(<span class="cm-string">"data"</span>, <span class="cm-keyword">function</span>(<span class="cm-def">chunk</span>) {
    <span class="cm-variable-2">data</span> <span class="cm-operator">+=</span> <span class="cm-variable-2">chunk</span>.<span class="cm-property">toString</span>();
  });
  <span class="cm-variable-2">stream</span>.<span class="cm-property">on</span>(<span class="cm-string">"end"</span>, <span class="cm-keyword">function</span>() {
    <span class="cm-variable-2">callback</span>(<span class="cm-atom">null</span>, <span class="cm-variable-2">data</span>);
  });
  <span class="cm-variable-2">stream</span>.<span class="cm-property">on</span>(<span class="cm-string">"error"</span>, <span class="cm-keyword">function</span>(<span class="cm-def">error</span>) {
    <span class="cm-variable-2">callback</span>(<span class="cm-variable-2">error</span>);
  });
}</pre>
<h3>Fixing a leak</h3>
<p>It is enough to strip out
all occurrences of two dots that have a slash, a backslash, or
the end of the string on both sides. Using the <code>replace</code> method with a
regular expression is the easiest way to do this. Do not forget
the <code>g</code> flag on the expression, or <code>replace</code> will  replace only a
single instance, and people could still get around this safety measure
by including additional double dots in their paths! Also make sure you
do the replace <em>after</em> decoding the string, or it would be possible to
foil the check by encoding a dot or a slash.</p>
<p>Another potentially
worrying case is when paths start with a slash, which are interpreted as
absolute paths. But because <code>urlToPath</code> puts a dot character in
front of the path, it is impossible to create requests that result in
such a path. Multiple slashes in a row, inside the path, are odd
but will be treated as a single slash by the file system.</p>
<h3>Creating directories</h3>
<p>You can use
the function that implements the <code>DELETE</code> method as a blueprint for
the <code>MKCOL</code> method. When no file is found, try to create a directory with
<code>fs.mkdir</code>. When a directory exists at that path, you can return a 204
response so that directory creation requests are idempotent. If a
nondirectory file exists here, return an error code. The code 400 (“bad
request”) would be appropriate here.</p>
<h3>A public space on the web</h3>
<p>You can create a <code>&lt;textarea&gt;</code> element to hold the content
of the file that is being edited. A <code>GET</code> request, using
<code>XMLHttpRequest</code>, can be used to get the current content of the file.
You can use relative URLs like <em>index.html</em>, instead of
<a href="http://localhost:8000/index.html"><em>http://localhost:8000/index.html</em></a>,
to refer to files on the same server as the running script.</p>
<p>Then, when the user clicks a button (you can use a <code>&lt;form&gt;</code>
element and <code>"submit"</code> event or simply a <code>"click"</code> handler), make a
<code>PUT</code> request to the same URL, with the content of the <code>&lt;textarea&gt;</code> as
request body, to save the file.</p>
<p>You
can then add a <code>&lt;select&gt;</code> element that contains all the files in the
server&#8217;s root directory by adding <code>&lt;option&gt;</code> elements containing
the lines returned by a <code>GET</code> request to the URL <code>/</code>. When the user
selects another file (a <code>"change"</code> event on the field), the script
must fetch and display that file. Also make sure that when saving a
file, you use the currently selected filename.</p>
<p>Unfortunately, the server is too
simplistic to be able to reliably read files from subdirectories
since it does not tell us whether the thing we fetched with a <code>GET</code>
request is a regular file or a directory. Can you think of a way to
extend the server to address this?</p>
</div>
<div id="ch22_sec19">
<h2>Project: Skill-Sharing Website</h2>
<h3>Disk persistence</h3>
<p>The simplest solution I can come up with
is to encode the whole <code>talks</code> object as JSON and dump it
to a file with <code>fs.writeFile</code>. There is already a function
(<code>registerChange</code>) that is called every time the server&#8217;s data
changes. It can be extended to write the new data to disk.</p>
<p>Pick a filename, for example
<code>./talks.json</code>. When the server starts, it can try to read that
file with <code>fs.readFile</code>, and if that succeeds, the server can use the
file&#8217;s contents as its starting data.</p>
<p>Beware, though. The <code>talks</code>
object started as a prototype-less object so that the <code>in</code>
operator could be sanely used. <code>JSON.parse</code> will return regular
objects with <code>Object.prototype</code> as their prototype. If you use JSON as
your file format, you&#8217;ll have to copy the properties of the object
returned by <code>JSON.parse</code> into a new, prototype-less object.</p>
<h3>Comment field resets</h3>
<p>The ad hoc approach
is to simply store the state of a talk&#8217;s comment field (its content and
whether it is focused) before redrawing the talk and then
reset the field to its old state afterward.</p>
<p>Another solution would be
to not simply replace the old DOM structure with the new one but
recursively compare them, node by node, and update only  the parts that
actually changed. This is a lot harder to implement, but it&#8217;s more general and
continues working even if we add another text field.</p>
<h3>Better templates</h3>
<p>You
could change <code>instantiateTemplate</code> so that its inner function
takes not just a node but also a current context as an argument. You can
then, when looping over a node&#8217;s child nodes, check whether the child
has a <code>template-repeat</code> attribute. If it does, don&#8217;t instantiate it
once but instead loop over the array indicated by the attribute&#8217;s
value and instantiate it once for every element in the array, passing
the current array element as context.</p>
<p>Conditionals can be implemented in a similar way, with attributes
called, for example, <code>template-when</code> and <code>template-unless</code>, which
cause a node to be instantiated only when a given property is true (or
false).</p>
<h3>The unscriptables</h3>
<p>Two central aspects of the
approach taken in this chapter—a clean HTTP interface and client-side
template rendering—don&#8217;t work without JavaScript. Normal HTML forms
can send <code>GET</code> and <code>POST</code> requests but not <code>PUT</code> or <code>DELETE</code> requests
and can send their data only  to a fixed URL.</p>
<p>Thus, the server
would have to be revised to accept comments, new talks, and deleted
talks through <code>POST</code> requests, whose bodies aren&#8217;t JSON but rather
use the URL-encoded format that HTML forms use (see
<a href="18_forms.xhtml#forms">Chapter 17</a>). These requests would have to
return the full new page so that users see the new state of the site
after they make a change. This would not be too hard to engineer and
could be implemented alongside the “clean” HTTP interface.</p>
<p>The code for rendering talks would have to be duplicated
on the server. The <code>index.html</code> file, rather than being a static file,
would have to be generated dynamically by adding a handler for it to
the router. That way, it already includes the current talks and
comments when it gets served.</p>
</div>
    </article>
  </body>
</html>
